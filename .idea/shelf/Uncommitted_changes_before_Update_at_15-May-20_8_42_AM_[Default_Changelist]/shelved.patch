Index: src/main/java/Controller/DataBase/DataCenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.DataBase;\r\n\r\nimport Controller.DataBase.Json.JsonFileReader;\r\nimport Controller.DataBase.Json.JsonFileWriter;\r\nimport Model.Account.Account;\r\nimport Model.Account.Customer;\r\nimport Model.Account.Manager;\r\nimport Model.Account.Seller;\r\nimport Model.Discount.Auction;\r\nimport Model.Discount.Discount;\r\nimport Model.Discount.DiscountCode;\r\nimport Model.ProductsOrganization.Category;\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.ProductsOrganization.ProductInfo;\r\nimport Model.Request.*;\r\nimport com.google.gson.typeadapters.RuntimeTypeAdapterFactory;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Set;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic class DataCenter {\r\n    private static DataCenter Instance;\r\n    private final RuntimeTypeAdapterFactory<Account> accountRuntimeTypeAdapter = RuntimeTypeAdapterFactory.of(Account.class, \"type\")\r\n            .registerSubtype(Customer.class, Customer.class.getName())\r\n            .registerSubtype(Seller.class, Seller.class.getName())\r\n            .registerSubtype(Manager.class, Manager.class.getName());\r\n    private final RuntimeTypeAdapterFactory<Request> requestRuntimeTypeAdapter = RuntimeTypeAdapterFactory.of(Request.class, \"type\")\r\n            .registerSubtype(ProductInfoRequest.class, ProductInfoRequest.class.getName())\r\n            .registerSubtype(AuctionRequest.class, AuctionRequest.class.getName())\r\n            .registerSubtype(ReviewRequest.class, ReviewRequest.class.getName())\r\n            .registerSubtype(SellerRequest.class, SellerRequest.class.getName());\r\n    private final RuntimeTypeAdapterFactory<Discount> discountsRuntimeTypeAdaptor = RuntimeTypeAdapterFactory.of(Discount.class, \"type\")\r\n            .registerSubtype(Auction.class, Auction.class.getName())\r\n            .registerSubtype(DiscountCode.class, DiscountCode.class.getName());\r\n    private HashMap<String, Account> accountsByUsername;\r\n    private HashMap<String, Product> productsByName;\r\n    private ArrayList<Discount> discounts;\r\n    private ArrayList<Request> requests;\r\n    private HashMap<String, Category> categories;\r\n\r\n    private DataCenter() {\r\n        initCategories();\r\n        initProducts();\r\n        initAccounts();\r\n        initDiscounts();\r\n        initRequests();\r\n    }\r\n\r\n\r\n    public static DataCenter getInstance() {\r\n        if (Instance == null) {\r\n            Instance = new DataCenter();\r\n        }\r\n        return Instance;\r\n    }\r\n\r\n    private void initCategories() {\r\n        categories = new HashMap<>();\r\n        JsonFileReader reader = new JsonFileReader();\r\n        File file = new File(Config.getInstance().getCategoriesPath());\r\n        if (!file.exists())\r\n            file.mkdir();\r\n        File[] files = file.listFiles();\r\n        Arrays.stream(files).map((file1) -> {\r\n            try {\r\n                return reader.read(file1, Category.class);\r\n            } catch (FileNotFoundException e) {\r\n                return null;\r\n            }\r\n        }).forEach(this::addCategory);\r\n    }\r\n\r\n    private void addCategory(Category category) {\r\n        String[] categories = category.getCategoryPath().split(\"/\");\r\n        Category var100 = null;\r\n        for (int i = 0; i < categories.length - 1; i++) {\r\n            if (!this.categories.containsValue(categories[i])) {\r\n                Category temp = new Category(categories[i], var100);\r\n                if (var100 != null)\r\n                    var100.getSubCategories().put(categories[i], temp);\r\n                var100 = temp;\r\n                this.categories.put(categories[i], var100);\r\n            } else\r\n                var100 = this.categories.get(categories[i]);\r\n        }\r\n        category.setParent(var100);\r\n        this.categories.put(category.getName(), category);\r\n    }\r\n\r\n    private void initRequests() {\r\n        requests = new ArrayList<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(requestRuntimeTypeAdapter);\r\n        File requestsFile = new File(Config.getInstance().getRequestsPath());\r\n        if (!requestsFile.exists()) {\r\n            requestsFile.mkdirs();\r\n        }\r\n        File[] files = requestsFile.listFiles();\r\n        Arrays.stream(files).map((file) -> {\r\n            try {\r\n                return jsonFileReader.read(file, Request.class);\r\n            } catch (FileNotFoundException e) {\r\n                return null;\r\n            }\r\n        }).forEach(this::addRequest);\r\n    }\r\n\r\n    private void addRequest(Request request) {\r\n        if (!requests.contains(request))\r\n            requests.add(request);\r\n    }\r\n\r\n    public void deleteRequestWithId(int id) {\r\n        for (Request request : requests) {\r\n            if (request.getId() == id) {\r\n                requests.remove(request);\r\n                File file = new File(generateRequestsFilePath(id));\r\n                file.delete();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void initAccounts() {\r\n        accountsByUsername = new HashMap<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(accountRuntimeTypeAdapter);\r\n        for (String s : Config.getInstance().getAccountsPath()) {\r\n            File accountsDirectory = new File(s);\r\n            if (!accountsDirectory.exists()) {\r\n                accountsDirectory.mkdirs();\r\n            }\r\n            initAccountsEach(accountsDirectory, jsonFileReader);\r\n        }\r\n    }\r\n\r\n    private void initAccountsEach(File accountsDirectory, JsonFileReader reader) {\r\n        File[] usersFiles = accountsDirectory.listFiles();\r\n        if (usersFiles != null) {\r\n            Arrays.stream(usersFiles).map((file) -> {\r\n                try {\r\n                    return (Account) reader.read(file, Account.class);\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addAccount);\r\n        }\r\n    }\r\n\r\n    private void initProducts() {\r\n        productsByName = new HashMap<>();\r\n        JsonFileReader reader = new JsonFileReader();\r\n        File productsDirectory = new File(Config.getInstance().getProductsPath());\r\n        if (!productsDirectory.exists())\r\n            productsDirectory.mkdir();\r\n        File[] productsFiles = productsDirectory.listFiles();\r\n        if (productsFiles != null) {\r\n            Arrays.stream(productsFiles).map((file) -> {\r\n                try {\r\n                    Product temp = reader.read(file, Product.class);\r\n                    String var100 = temp.getCategoryName();\r\n                    if (var100 != null && var100 != \"\") {\r\n                        temp.setParent(categories.get(var100));\r\n                        categories.get(var100).getIncludedPRoducts().put(temp.getName(), temp);\r\n                    }\r\n                    return temp;\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addProduct);\r\n        }\r\n    }\r\n\r\n    private void initDiscounts() {\r\n        discounts = new ArrayList<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(discountsRuntimeTypeAdaptor);\r\n        for (String s : Config.getInstance().getDiscountsPath()) {\r\n            File directory = new File(s);\r\n            if (!directory.exists()) {\r\n                directory.mkdirs();\r\n            }\r\n            initDiscountsEach(directory, jsonFileReader);\r\n        }\r\n    }\r\n\r\n    private void initDiscountsEach(File discountsDir, JsonFileReader reader) {\r\n        File[] discountsFileArr = discountsDir.listFiles();\r\n\r\n        if (discountsFileArr != null) {\r\n            Arrays.stream(discountsFileArr).map((file) -> {\r\n                try {\r\n                    if (file.getPath().contains(\"discountcode.accounts.json\") || file.getPath().contains(\"auction.products.json\"))\r\n                        return null;\r\n                    return reader.read(file, Discount.class);\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addDiscount);\r\n        }\r\n    }\r\n\r\n\r\n    private void initDiscount(DiscountCode discount) throws Exception {\r\n        JsonFileReader reader = new JsonFileReader();\r\n        try {\r\n            File file = new File(generateDiscountCodeAccountsFilePath(discount.getId()));\r\n            ArrayList<String> strings = reader.read(file, ArrayList.class);\r\n            ArrayList<Account> accounts = new ArrayList<>();\r\n            for (String s : strings) {\r\n                accounts.add(accountsByUsername.get(s));\r\n                accountsByUsername.get(s).addDiscountCode(discount);\r\n            }\r\n            discount.setAllAllowedAccounts(accounts);\r\n            discounts.add(discount);\r\n        } catch (FileNotFoundException var1) {\r\n        }\r\n    }\r\n\r\n    private void initDiscount(Auction auction) throws Exception {\r\n        JsonFileReader reader = new JsonFileReader();\r\n        try {\r\n            File file = new File(generateAuctionProductsFilePath(auction.getId()));\r\n            ArrayList<Double> strings = reader.read(file, ArrayList.class);\r\n            ArrayList<Product> products = new ArrayList<>();\r\n            for (double id : strings) {\r\n                products.add(getProductById((int) id));\r\n            }\r\n            ((Auction) auction).setAllIncludedProducts(products);\r\n            discounts.add(auction);\r\n        } catch (FileNotFoundException ignored) {\r\n        }\r\n    }\r\n\r\n    private void addProduct(Product product) {\r\n        if (!productsByName.containsValue(product.getName()))\r\n            productsByName.put(product.getName(), product);\r\n    }\r\n\r\n    private void addAccount(Account account) {\r\n        if (!accountsByUsername.containsValue(account)) {\r\n            account.setAllDiscountCodes(new ArrayList<>());\r\n            if (account instanceof Seller)\r\n                for (ProductInfo productInfo : ((Seller) account).getAllProducts()) {\r\n                    productInfo.setProduct(productsByName.get(productInfo.getPName()));\r\n                }\r\n            accountsByUsername.put(account.getUsername(), account);\r\n        }\r\n    }\r\n\r\n    private void addDiscount(Discount discount) {\r\n        if (!discounts.contains(discount))\r\n            try {\r\n                if (discount instanceof Auction) {\r\n                    initDiscount((Auction) discount);\r\n                } else\r\n                    initDiscount((DiscountCode) discount);\r\n            } catch (Exception exception) {\r\n                return;\r\n                //Logger.log(exception.getMessage())\r\n            }\r\n    }\r\n\r\n    public void saveAccount(Account account) throws IOException {\r\n        if (account instanceof Seller)\r\n            saveAccount((Seller) account);\r\n        if (account instanceof Customer)\r\n            saveAccount((Customer) account);\r\n        if (account instanceof Manager)\r\n            saveAccount((Manager) account);\r\n        addSavedAccount(account);\r\n    }\r\n\r\n    public void saveAccount(Customer customer) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(customer, generateUserFilePath(customer.getUsername(), Config.AccountsPath.CUSTOMER.getNum(), \"customer\"), Account.class);\r\n\r\n    }\r\n\r\n    public void saveAccount(Seller seller) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(seller, generateUserFilePath(seller.getUsername(), Config.AccountsPath.SELLER.getNum(), \"seller\"), Account.class);\r\n    }\r\n\r\n    public void saveAccount(Manager manager) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(manager, generateUserFilePath(manager.getUsername(), Config.AccountsPath.MANAGER.getNum(), \"manager\"), Account.class);\r\n    }\r\n\r\n\r\n    public void saveProduct(Product product) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter();\r\n        product.setCategoryName(product.getParent().getName());\r\n        writer.write(product, generateProductFilePath(product.getId()));\r\n        if (!productsByName.containsValue(product))\r\n            productsByName.put(product.getName(), product);\r\n    }\r\n\r\n    public void saveDiscount(Discount discount) throws IOException {\r\n        if (discount instanceof Auction) {\r\n            saveDiscount((Auction) discount);\r\n        } else {\r\n            saveDiscount((DiscountCode) discount);\r\n        }\r\n    }\r\n\r\n    public void saveDiscount(Auction auction) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(discountsRuntimeTypeAdaptor);\r\n        Discount tmp = auction;\r\n        writer.write(tmp, generateAuctionFilePath(auction.getId()), Discount.class);\r\n        ArrayList<Integer> products = new ArrayList<>();\r\n        for (Product product : auction.getAllIncludedProducts()) {\r\n            products.add(product.getId());\r\n        }\r\n        writer.write(products, generateAuctionProductsFilePath(auction.getId()));\r\n        if (!discounts.contains(auction))\r\n            discounts.add(auction);\r\n    }\r\n\r\n    public void saveDiscount(DiscountCode discountCode) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(discountsRuntimeTypeAdaptor);\r\n        Discount tmp = discountCode;\r\n        writer.write(tmp, generateDiscountCodeFilePath(discountCode.getId()), Discount.class);\r\n        ArrayList<String> accounts = new ArrayList<>();\r\n        for (Account product : discountCode.getAllAllowedAccounts()) {\r\n            accounts.add(product.getUsername());\r\n        }\r\n        new JsonFileWriter().write(accounts, generateDiscountCodeAccountsFilePath(discountCode.getId()));\r\n        if (!discounts.contains(discountCode))\r\n            discounts.add(discountCode);\r\n    }\r\n\r\n    public void saveRequest(Request request) throws IOException {\r\n        JsonFileWriter jsonFileWriter = new JsonFileWriter(requestRuntimeTypeAdapter);\r\n        jsonFileWriter.write(request, generateRequestsFilePath(request.getId()), Request.class);\r\n    }\r\n\r\n    public void saveCategory(Category category) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter();\r\n        category.setCategoryPath(category.createCategoryStringPath(category));\r\n        writer.write(category, generateCategoryFilePath(category.getName()));\r\n    }\r\n\r\n    private void addSavedAccount(Account account) {\r\n        if (!accountsByUsername.containsValue(account))\r\n            accountsByUsername.put(account.getUsername(), account);\r\n    }\r\n\r\n    private String generateUserFilePath(String username, int state, String type) {\r\n        String var10000 = Config.getInstance().getAccountsPath()[state] + \"/\" + username;\r\n        return var10000 + \".\" + type + \".json\";\r\n    }\r\n\r\n    private String generateProductFilePath(int id) {\r\n        String var10000 = Config.getInstance().getProductsPath() + \"/\" + id;\r\n        return var10000 + \".product.json\";\r\n    }\r\n\r\n    private String generateAuctionFilePath(int id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.AUCTION.getNum()] + \"/\" + id;\r\n        return var10000 + \".auction.json\";\r\n    }\r\n\r\n    private String generateDiscountCodeFilePath(int id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.DISCOUNTCODE.getNum()] + \"/\" + id;\r\n        return var10000 + \".discountcode.json\";\r\n    }\r\n\r\n    private String generateAuctionProductsFilePath(int id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.AUCTION.getNum()] + \"/\" + id;\r\n        return var10000 + \".auction.products.json\";\r\n    }\r\n\r\n    private String generateDiscountCodeAccountsFilePath(int id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.DISCOUNTCODE.getNum()] + \"/\" + id;\r\n        return var10000 + \".discountcode.accounts.json\";\r\n    }\r\n\r\n    private String generateRequestsFilePath(int id) {\r\n        String var10000 = Config.getInstance().getRequestsPath() + \"/\" + id;\r\n        return var10000 + \".request.json\";\r\n    }\r\n\r\n    private String generateCategoryFilePath(String name) {\r\n        String var10000 = Config.getInstance().getCategoriesPath() + \"/\" + name;\r\n        return var10000 + \".category.json\";\r\n    }\r\n\r\n    public Account getAccountByName(String name) {\r\n        return accountsByUsername.get(name);\r\n    }\r\n\r\n    public boolean userExistWithUsername(String username) {\r\n        for (String accountUsername : accountsByUsername.keySet()) {\r\n            if (username.equals(accountUsername))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Product getProductById(int id) {\r\n        AtomicReference<Product> temp = new AtomicReference<>();\r\n        productsByName.forEach((k, v) -> {\r\n            if (v != null)\r\n                if (v.getId() == id)\r\n                    temp.set(v);\r\n        });\r\n        return temp.get();\r\n    }\r\n\r\n    public Product getProductByName(String name) {\r\n        return productsByName.get(name);\r\n    }\r\n\r\n    public DiscountCode getDiscountcodeWithId(int id) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode && discount.getId() == id)\r\n                return (DiscountCode) discount;\r\n        }\r\n        throw new BadRequestException(\"discount not found\");\r\n    }\r\n\r\n    public Auction getAuctionWithId(int id) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof Auction && discount.getId() == id)\r\n                return (Auction) discount;\r\n        }\r\n        throw new BadRequestException(\"Auction not found\");\r\n    }\r\n\r\n    public Product getProductWithId(int id) throws BadRequestException {\r\n        for (Product product : productsByName.values()) {\r\n            if (product != null && product.getId() == id)\r\n                return product;\r\n        }\r\n        throw new BadRequestException(\"product with this id hasn't found\");\r\n    }\r\n\r\n    public boolean productExistWithId(int id) {\r\n        for (Product product : productsByName.values()) {\r\n            if (product != null && product.getId() == id)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean auctionExistsWithId(int id) {\r\n        for (Discount discount : discounts) {\r\n            if (discount != null && discount instanceof Auction && discount.getId() == id)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean discountcodeExistsWithId(int id) {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode && discount.getId() == id)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public ArrayList<Request> getAllUnsolvedRequests() {\r\n        return requests;\r\n    }\r\n\r\n    public boolean deleteAccount(String username) throws BadRequestException, IOException {\r\n        Account account = accountsByUsername.get(username);\r\n        for (DiscountCode discountCode : account.getAllDiscountCodes()) {\r\n            deleteAccountFromDiscountCode(discountCode, account.getUsername());\r\n        }\r\n        if (account instanceof Customer)\r\n            return deleteAccount((Customer) account);\r\n        else if (account instanceof Manager)\r\n            return deleteAccount((Manager) account);\r\n        else if (account instanceof Seller)\r\n            return deleteAccount((Seller) account);\r\n        else\r\n            throw new BadRequestException(\"Could not find the username.\", new Throwable(\"Not such username found in Data Center\"));\r\n\r\n    }\r\n\r\n    private void deleteAccountFromDiscountCode(DiscountCode discountCode, String username) {\r\n        discountCode.getAllAllowedAccounts().remove(username);\r\n    }\r\n\r\n    private boolean deleteAccount(Customer customer) {\r\n        File file = new File(generateUserFilePath(customer.getUsername(), Config.AccountsPath.CUSTOMER.getNum(), \"Customer\"));\r\n        customer.getActiveRequestsId().forEach(this::deleteRequestWithId);\r\n        return file.delete() && accountsByUsername.remove(customer.getUsername(), customer);\r\n    }\r\n\r\n    private boolean deleteAccount(Seller seller) throws IOException {\r\n        File file = new File(generateUserFilePath(seller.getUsername(), Config.AccountsPath.MANAGER.getNum(), \"Manager\"));\r\n        seller.getActiveRequestsId().forEach(this::deleteRequestWithId);\r\n        for (ProductInfo productInfo : seller.getAllProducts()) {\r\n            deleteProductInfo(productInfo, seller.getUsername());\r\n        }\r\n        seller.getAuctionsId().forEach(this::deleteAuctionWithId);\r\n        return file.delete() && accountsByUsername.remove(seller.getUsername(), seller);\r\n    }\r\n\r\n    private void deleteAuctionWithId(Integer id) {\r\n        try {\r\n            discounts.remove(getAuctionWithId(id));\r\n            File file = new File(generateAuctionFilePath(id));\r\n            file.delete();\r\n            file = new File(generateAuctionProductsFilePath(id));\r\n            file.delete();\r\n        } catch (BadRequestException ignored) {\r\n        }\r\n    }\r\n\r\n    private void deleteProductInfo(ProductInfo productInfo, String username) throws IOException {\r\n        if (productInfo.getProduct() == null)\r\n            productInfo.setProduct(productsByName.get(productInfo.getPName()));\r\n        productInfo.getProduct().getAllSellers().remove(username);\r\n        saveProduct(productInfo.getProduct());\r\n    }\r\n\r\n\r\n    private boolean deleteAccount(Manager manager) {\r\n        File file = new File(generateUserFilePath(manager.getUsername(), Config.AccountsPath.SELLER.getNum(), \"Seller\"));\r\n        return file.delete() && accountsByUsername.remove(manager.getUsername(), manager);\r\n    }\r\n\r\n    private boolean deleteProduct(Product product) throws IOException {\r\n        for (String seller : product.getAllSellers()) {\r\n            deleteSellerEach(product, seller);\r\n            saveAccount(accountsByUsername.get(seller));\r\n        }\r\n        File file = new File(generateProductFilePath(product.getId()));\r\n        return file.delete() && productsByName.remove(product.getName(), product);\r\n    }\r\n\r\n    private void deleteSellerEach(Product product, String seller) {\r\n        ((Seller) accountsByUsername.get(seller)).deleteProductInfo(product);\r\n    }\r\n\r\n    public boolean deleteDiscountCode(DiscountCode discountCode) throws IOException {\r\n        for (Account account : discountCode.getAllAllowedAccounts()) {\r\n            account.getAllDiscountCodes().remove(discountCode);\r\n            saveAccount(account);\r\n        }\r\n        File file = new File(generateDiscountCodeAccountsFilePath(discountCode.getId()));\r\n        return file.delete() && discounts.remove(discountCode);\r\n    }\r\n\r\n    public boolean deleteCategory(Category category) throws IOException {\r\n        for (Product product : category.getIncludedPRoducts().values()) {\r\n            product.setParent(category.getParent());\r\n            saveProduct(product);\r\n        }\r\n        for (Category value : category.getSubCategories().values()) {\r\n            value.setParent(category.getParent());\r\n            saveCategory(value);\r\n        }\r\n        File file = new File(generateCategoryFilePath(category.getName()));\r\n        return file.delete() && this.categories.remove(category.getName(), category);\r\n    }\r\n\r\n\r\n    public Set<String> getAllAccountsInfo() {\r\n        return this.accountsByUsername.keySet();\r\n    }\r\n\r\n    public boolean doesUsernameExist(String username) {\r\n        for (String accountUsername : this.accountsByUsername.keySet()) {\r\n            if (username.equals(accountUsername))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean doesProductExist(String productId) {\r\n        for (Product product : productsByName.values()) {\r\n            if (Integer.toString(product.getId()).equals(productId))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Set<String> getAllProducts() {\r\n        return productsByName.keySet();\r\n    }\r\n\r\n    public int getLastDiscountId() {\r\n        return discounts.size();\r\n    }\r\n\r\n    public ArrayList<DiscountCode> getAllDiscountCodes() {\r\n        ArrayList<DiscountCode> allDiscountCodes = new ArrayList<DiscountCode>();\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode)\r\n                allDiscountCodes.add((DiscountCode) discount);\r\n        }\r\n        return allDiscountCodes;\r\n    }\r\n\r\n    public DiscountCode getDiscountcodeWithCode(String code) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount != null && discount instanceof DiscountCode)\r\n                if (((DiscountCode) discount).getCode().equals(code))\r\n                    return (DiscountCode) discount;\r\n        }\r\n        throw new BadRequestException(\"discount not found\");\r\n    }\r\n}\r\n\r\nclass BadRequestException extends Exception {\r\n    public BadRequestException() {\r\n        super();\r\n    }\r\n\r\n    public BadRequestException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n\r\n    public BadRequestException(String message) {\r\n        super(message);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/DataBase/DataCenter.java	(revision 88dcfc0f7bd8852540944b51d7b3c0f82075413d)
+++ src/main/java/Controller/DataBase/DataCenter.java	(date 1589515829476)
@@ -611,9 +611,6 @@
 }
 
 class BadRequestException extends Exception {
-    public BadRequestException() {
-        super();
-    }
 
     public BadRequestException(String message, Throwable cause) {
         super(message, cause);
