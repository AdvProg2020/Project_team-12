Index: src/main/java/Controller/CommandProcessors/PurchasePageCP.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.CommandProcessors;\r\n\r\nimport Controller.DataBase.BadRequestException;\r\nimport Controller.DataBase.DataCenter;\r\nimport Model.Account.Seller;\r\nimport Model.Log.PurchaseLog;\r\nimport Model.Log.SellLog;\r\nimport Model.ProductsOrganization.Cart;\r\nimport Model.ProductsOrganization.ProductOnLog;\r\nimport View.Exceptions.CustomerExceptions;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class PurchasePageCP extends CommandProcessor {\r\n    private static CommandProcessor Instance;\r\n\r\n    protected PurchasePageCP() {\r\n        super(MainMenuCP.getInstance());\r\n    }\r\n\r\n    public static CommandProcessor getInstance() {\r\n        if (Instance == null)\r\n            Instance = new PurchasePageCP();\r\n        return Instance;\r\n    }\r\n\r\n    public void showProductsInCart() {\r\n        System.out.println(CommandProcessor.getCart().toString());\r\n    }\r\n\r\n    public void increaseProduct(String productID) throws Exception {\r\n\r\n        if (!sellerHasEnoughProduct(productID))\r\n            throw new Exception(\"cannot purchase this product\", new Throwable(\"this account is'n a seller or the seller doesnt have enough product\"));\r\n        else\r\n            CommandProcessor.getCart().increaseProductWithId(productID);\r\n    }\r\n\r\n    private boolean sellerHasEnoughProduct(String productID) throws Exception {\r\n        return DataCenter.getInstance().getProductById(productID).getRemainingItems() > (Cart.getInstance().getQuantityWIthID(productID) + 1);\r\n    }\r\n\r\n\r\n    public void decreaseProductWithID(String productID) throws Exception {\r\n        CommandProcessor.getCart().decreaseProductWithId(productID);\r\n\r\n    }\r\n\r\n    public void showTotalPrice() {\r\n        System.out.println(CommandProcessor.getCart().getPayAmount());\r\n    }\r\n\r\n    public void buy(String discountCodeId) throws CustomerExceptions, BadRequestException {\r\n        if (discountCodeId == null || discountCodeId.equals(\"\") || Cart.getInstance().getOwner().hasDiscountCode(discountCodeId))\r\n            if (Cart.getInstance().getOwner().getCredit() >= DataCenter.getInstance().getDiscountcodeWithId(discountCodeId).calculatePrice(Cart.getInstance().getPayAmount()))\r\n                buyWithoutDiscountCode();\r\n            else\r\n                throw new CustomerExceptions(\"You dont have enough credit\");\r\n        else if (Cart.getInstance().getOwner().getCredit() >= Cart.getInstance().getPayAmount())\r\n            buyWithDiscountCode(discountCodeId);\r\n        else\r\n            throw new CustomerExceptions(\"You dont have enough credit\");\r\n\r\n    }\r\n\r\n    private void buyWithoutDiscountCode() {\r\n        calculateSellersLog();\r\n        double finalPrice = Cart.getInstance().getPayAmount();\r\n        HashMap<Cart.ProductInCart, Seller> sellers = getTraders();\r\n        ArrayList<ProductOnLog> productOnLogs = new ArrayList<>();\r\n        for (Cart.ProductInCart productInCart : sellers.keySet()) {\r\n            productOnLogs.add(new ProductOnLog(productInCart.getProduct().getName(), productInCart.getPrice(), productInCart.getProduct().getSeller(), productInCart.getQuantity()));\r\n        }\r\n        PurchaseLog purchaseLog = new PurchaseLog(DataCenter.getInstance().getDate(), finalPrice, finalPrice, productOnLogs);\r\n        Cart.getInstance().getOwner().setCredit(Cart.getInstance().getOwner().getCredit() - finalPrice);\r\n        Cart.getInstance().getOwner().getBuyLogs().add(purchaseLog);\r\n    }\r\n\r\n    private void buyWithDiscountCode(String discountCodeID) {\r\n        calculateSellersLog();\r\n        double finalPrice;\r\n        try {\r\n            finalPrice = DataCenter.getInstance().getDiscountcodeWithId(discountCodeID).calculatePrice(Cart.getInstance().getPayAmount());\r\n            DataCenter.getInstance().getDiscountcodeWithId(discountCodeID).useCode();\r\n\r\n        } catch (BadRequestException e) {\r\n            buyWithoutDiscountCode();\r\n            return;\r\n        }\r\n        HashMap<Cart.ProductInCart, Seller> sellers = getTraders();\r\n        ArrayList<ProductOnLog> productOnLogs = new ArrayList<>();\r\n        for (Cart.ProductInCart productInCart : sellers.keySet()) {\r\n            productOnLogs.add(new ProductOnLog(productInCart.getProduct().getName(), productInCart.getPrice(), productInCart.getProduct().getSeller(), productInCart.getQuantity()));\r\n        }\r\n        PurchaseLog purchaseLog = new PurchaseLog(DataCenter.getInstance().getDate(), finalPrice, finalPrice, productOnLogs);\r\n        Cart.getInstance().getOwner().setCredit(Cart.getInstance().getOwner().getCredit() - finalPrice);\r\n        Cart.getInstance().getOwner().getBuyLogs().add(purchaseLog);\r\n    }\r\n\r\n    private void calculateSellersLog() {\r\n        HashMap<Cart.ProductInCart, Seller> sellers = getTraders();\r\n        Cart.ProductInCart[] productsInCart = (Cart.ProductInCart[]) sellers.keySet().toArray();\r\n        for (int i = 0; i < sellers.size(); ) {\r\n            ArrayList<ProductOnLog> productsOnLog = new ArrayList<>();\r\n            Seller seller = sellers.get(productsInCart[i]);\r\n            double receivedPrice = 0;\r\n            double decreasedPrice = 0;\r\n            for (int j = 0; j < sellers.size(); )\r\n                if (productsInCart[i].getProduct().getSeller().equals(productsInCart[j].getProduct().getSeller())) {\r\n                    productsOnLog.add(new ProductOnLog(productsInCart[j].getProduct().getName(), productsInCart[j].getPrice(), productsInCart[j].getProduct().getSeller(), productsInCart[j].getQuantity()));\r\n                    receivedPrice += productsInCart[j].getPrice();\r\n                    decreasedPrice += productsInCart[j].getPrice() - productsInCart[j].getProduct().getRawPrice();\r\n                    sellers.remove(productsInCart[j]);\r\n                }\r\n            productsInCart = (Cart.ProductInCart[]) sellers.keySet().toArray();\r\n            seller.getSellLogs().add(new SellLog(DataCenter.getInstance().getDate(), receivedPrice, decreasedPrice, productsOnLog));\r\n            seller.setCredit(seller.getCredit() + receivedPrice);\r\n        }\r\n    }\r\n\r\n    public HashMap<Cart.ProductInCart, Seller> getTraders() {\r\n        HashMap<Cart.ProductInCart, Seller> sellers = new HashMap<>();\r\n        for (Cart.ProductInCart product : Cart.getInstance().getProducts()) {\r\n            sellers.put(product, (Seller) DataCenter.getInstance().getAccountByName(product.getProduct().getSeller()));\r\n        }\r\n        return sellers;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/CommandProcessors/PurchasePageCP.java	(revision c7441a830730d0688e10fa36586fecc3ac404ab3)
+++ src/main/java/Controller/CommandProcessors/PurchasePageCP.java	(date 1589732495297)
@@ -88,7 +88,7 @@
             buyWithoutDiscountCode();
             return;
         }
-        HashMap<Cart.ProductInCart, Seller> sellers = getTraders();
+        HashMap <Cart.ProductInCart, Seller> sellers = getTraders();
         ArrayList<ProductOnLog> productOnLogs = new ArrayList<>();
         for (Cart.ProductInCart productInCart : sellers.keySet()) {
             productOnLogs.add(new ProductOnLog(productInCart.getProduct().getName(), productInCart.getPrice(), productInCart.getProduct().getSeller(), productInCart.getQuantity()));
Index: src/main/java/Controller/CommandProcessors/AuctionsPageCP.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.CommandProcessors;\r\n\r\n\r\nimport Controller.DataBase.DataCenter;\r\nimport Model.Discount.Auction;\r\nimport Model.ProductsOrganization.Category;\r\nimport Model.ProductsOrganization.Filter.Filter;\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.ProductsOrganization.Sort.Sort;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class AuctionsPageCP extends Controller.CommandProcessors.CommandProcessor {\r\n    private static CommandProcessor Instance;\r\n    private ArrayList<Category> allCategories;\r\n    private ArrayList<Auction> allAuctions;\r\n    private ArrayList<Product> allProducts;\r\n    private ArrayList<Filter> allFilters;\r\n    private Filter filter;\r\n    private Sort sort;\r\n    public static CommandProcessor getInstance(){\r\n        if (Instance == null)\r\n            Instance = new AuctionsPageCP();\r\n        return Instance;\r\n    }\r\n    public AuctionsPageCP() {\r\n        super(MainMenuCP.getInstance());\r\n        /* TODO: get these from data center:*/\r\n        this.allCategories = DataCenter.getInstance().getCategories();\r\n        this.allProducts = new ArrayList<>();\r\n        for (Auction auction : allAuctions)\r\n            allProducts.addAll(auction.getAllProducts());\r\n        this.allFilters = new ArrayList<>();\r\n        this.filter = new Filter(null);\r\n        this.sort = new Sort();\r\n    }\r\n\r\n    // Command: show available filters\r\n    public ArrayList<String> getAvailableFilters() {\r\n        return filter.getAvailableFilters();\r\n    }\r\n\r\n    // Command: filter [an available filter]\r\n    public boolean canFilter(String name) {\r\n        return filter.canFilter(name);\r\n    }\r\n    public void filterBySelectedFeatures(String name, ArrayList<String> selectedValues) {\r\n        filter.filterBySelectedFeatures(name, selectedValues);\r\n        if (name.equals(\"Category\") && selectedValues.size() > 0)\r\n            filter.setCurrentCategory(getCategoryByName(selectedValues.get(0)));\r\n    }\r\n    public void filterByRange(String name, double minValue, double maxValue) {\r\n        filter.filterByRange(name, minValue, maxValue);\r\n    }\r\n\r\n    // Command: current filters\r\n    public ArrayList<String> getCurrentFilters() {\r\n        return filter.getCurrentFilters();\r\n    }\r\n\r\n    // Command: disable filter [a selected filter]\r\n    public boolean canDisableFilter(String name) {\r\n        return filter.canDisableFilter(name);\r\n    }\r\n    public void disableFilter(String name) {\r\n        filter.disableFilter(name);\r\n    }\r\n\r\n    // Command: show available sorts\r\n    public ArrayList<String> getAvailableSorts() {\r\n        return sort.getAvailableSorts();\r\n    }\r\n\r\n    // Command: sort [an available sort]\r\n    public boolean canSort(String type) {\r\n        return sort.canSort(type);\r\n    }\r\n    public void setSortType(String type) {\r\n        sort.setSortType(type);\r\n    }\r\n\r\n    // Command: current sort\r\n    public String getCurrentSort() {\r\n        return sort.getCurrentSort();\r\n    }\r\n\r\n    // Command: disable sort\r\n    public void disableSort() {\r\n        sort.disableSort();\r\n    }\r\n\r\n    // Command: offs\r\n    public HashMap<Product, Auction> getProductsInAuction() {\r\n        ArrayList<Product> products = getSortedProducts();\r\n        HashMap<Product, Auction> map = new HashMap<>();\r\n        for (Product product : products)\r\n            map.put(product, getAuctionByProduct(product));\r\n        return map;\r\n    }\r\n    public ArrayList<Product> getSortedProducts() {\r\n        return sort.getSortedProducts(getFilteredProducts());\r\n    }\r\n    public ArrayList<Product> getFilteredProducts() {\r\n        return filter.getFilteredProducts(allProducts);\r\n    }\r\n\r\n    // Additional methods\r\n    public Category getCategoryByName(String name) {\r\n        for (Category category : allCategories)\r\n            if (category.getName().equals(name))\r\n                return category;\r\n        return null;\r\n    }\r\n    public Auction getAuctionByProduct(Product product) {\r\n        for (Auction auction : allAuctions)\r\n            if (auction.getAllProducts().contains(product))\r\n                return auction;\r\n        return null;\r\n    }\r\n\r\n    public ArrayList<Filter> getAllFilters() {\r\n        return allFilters;\r\n    }\r\n\r\n    public void setAllFilters(ArrayList<Filter> allFilters) {\r\n        this.allFilters = allFilters;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/CommandProcessors/AuctionsPageCP.java	(revision c7441a830730d0688e10fa36586fecc3ac404ab3)
+++ src/main/java/Controller/CommandProcessors/AuctionsPageCP.java	(date 1589659659477)
@@ -119,7 +119,7 @@
         return null;
     }
 
-    public ArrayList<Filter> getAllFilters() {
+    public ArrayList<Filter > getAllFilters() {
         return allFilters;
     }
 
Index: src/main/java/View/SetupPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.CommandProcessors.CommandProcessor;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class SetupPage {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"welcome\");\r\n        System.out.println(\"press enter to continue\");\r\n        Scanner scanner = InputUtility.getInstance();\r\n        scanner.nextLine();\r\n        if (!CommandProcessor.managerExists()) {\r\n            System.out.println(\"no administrator is set yet\\npress enter to setup\");\r\n            SetupPage.run();\r\n        }\r\n        MainMenu mainMenu = new MainMenu();\r\n        mainMenu.show();\r\n        mainMenu.run();\r\n    }\r\n\r\n    public static void run() {\r\n        try {\r\n            System.out.println(\"what do you want to do?\\n1. setup\\n2. exit\");\r\n            Scanner scanner = InputUtility.getInstance();\r\n            String command = scanner.nextLine();\r\n            if (command.equals(\"1\") | command.equals(\"setup\")) {\r\n                //TODO:Register first manager, it need a method which has not been created yet\r\n                /*File file = new File(\"D:\\\\Codes(java)\\\\Project\\\\src\\\\main\\\\resources\\\\accounts\");\r\n                if (file.mkdir()) {\r\n                    //register first manager\r\n                } else {\r\n                    System.out.println(\"something went wrong please try later\");\r\n                }*/\r\n            } else if (command.equals(\"2\") | command.equals(\"exit\")) {\r\n                return;\r\n            } else {\r\n                throw new Exception(\"invalid command\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(e.getMessage());\r\n            run();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/View/SetupPage.java	(revision c7441a830730d0688e10fa36586fecc3ac404ab3)
+++ src/main/java/View/SetupPage.java	(date 1589729346540)
@@ -26,14 +26,9 @@
             String command = scanner.nextLine();
             if (command.equals("1") | command.equals("setup")) {
                 //TODO:Register first manager, it need a method which has not been created yet
-                /*File file = new File("D:\\Codes(java)\\Project\\src\\main\\resources\\accounts");
-                if (file.mkdir()) {
-                    //register first manager
-                } else {
-                    System.out.println("something went wrong please try later");
-                }*/
+
             } else if (command.equals("2") | command.equals("exit")) {
-                return;
+                System.exit(0);
             } else {
                 throw new Exception("invalid command");
             }
Index: src/main/java/Controller/DataBase/DataCenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.DataBase;\r\n\r\nimport Controller.DataBase.Json.JsonFileReader;\r\nimport Controller.DataBase.Json.JsonFileWriter;\r\n\r\nimport Model.Account.Account;\r\nimport Model.Account.Customer;\r\nimport Model.Account.Manager;\r\nimport Model.Account.Seller;\r\nimport Model.Discount.Auction;\r\nimport Model.Discount.Discount;\r\nimport Model.Discount.DiscountCode;\r\nimport Model.ProductsOrganization.Category;\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.Request.*;\r\nimport com.google.gson.typeadapters.RuntimeTypeAdapterFactory;\r\nimport org.apache.commons.net.ntp.NTPUDPClient;\r\nimport org.apache.commons.net.ntp.TimeInfo;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport java.util.*;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic class DataCenter {\r\n    private static DataCenter Instance;\r\n    private final RuntimeTypeAdapterFactory<Discount> discountsRuntimeTypeAdaptor = RuntimeTypeAdapterFactory.of(Discount.class, \"type\")\r\n            .registerSubtype(Auction.class, Auction.class.getName())\r\n            .registerSubtype(DiscountCode.class, DiscountCode.class.getName());\r\n    private final RuntimeTypeAdapterFactory<Account> accountRuntimeTypeAdapter = RuntimeTypeAdapterFactory.of(Account.class, \"type\")\r\n            .registerSubtype(Customer.class, Customer.class.getName())\r\n            .registerSubtype(Seller.class, Seller.class.getName())\r\n            .registerSubtype(Manager.class, Manager.class.getName());\r\n    private final RuntimeTypeAdapterFactory<Request> requestRuntimeTypeAdapter = RuntimeTypeAdapterFactory.of(Request.class, \"type\")\r\n            .registerSubtype(ProductRequest.class, ProductRequest.class.getName())\r\n            .registerSubtype(AuctionRequest.class, AuctionRequest.class.getName())\r\n            .registerSubtype(ReviewRequest.class, ReviewRequest.class.getName())\r\n            .registerSubtype(SellerRequest.class, SellerRequest.class.getName());\r\n\r\n    private HashMap<String, Account> accountsByUsername;\r\n    private HashMap<String, Product> productsByName;\r\n    private ArrayList<Discount> discounts;\r\n    private ArrayList<Request> requests;\r\n    private HashMap<String, Category> categories;\r\n\r\n    private DataCenter() {\r\n        initCategories();\r\n        initAccounts();\r\n        initProducts();\r\n        initDiscounts();\r\n        initRequests();\r\n    }\r\n\r\n    public static String getNewSellID() {\r\n        return \"1\";\r\n    }\r\n\r\n    public static String getNewPurchaseID() {\r\n        return \"1\";\r\n    }\r\n\r\n    private void initProducts() {\r\n        productsByName = new HashMap<>();\r\n        for (Account value : accountsByUsername.values()) {\r\n            if (value instanceof Seller)\r\n                ((Seller) value).getAllProducts().forEach(this::addProduct);\r\n        }\r\n    }\r\n\r\n\r\n    public static DataCenter getInstance() {\r\n        if (Instance == null) {\r\n            Instance = new DataCenter();\r\n        }\r\n        return Instance;\r\n    }\r\n\r\n    private void initCategories() {\r\n        categories = new HashMap<>();\r\n        JsonFileReader reader = new JsonFileReader();\r\n        File file = new File(Config.getInstance().getCategoriesPath());\r\n        if (!file.exists())\r\n            file.mkdir();\r\n        File[] files = file.listFiles();\r\n        Arrays.stream(files).map((file1) -> {\r\n            try {\r\n                return reader.read(file1, Category.class);\r\n            } catch (FileNotFoundException e) {\r\n                return null;\r\n            }\r\n        }).forEach(this::addCategory);\r\n    }\r\n\r\n    private void addCategory(Category category)  {\r\n        String[] categories = category.getCategoryPath().split(\"/\");\r\n        Category var100 = null;\r\n        for (int i = 0; i < categories.length - 1; i++) {\r\n            if (!this.categories.containsValue(categories[i])) {\r\n                initCategory(categories[i]);\r\n                var100 = this.categories.get(categories[i]);\r\n            }\r\n        }\r\n        category.setParent(var100);\r\n        if (var100 != null)\r\n            var100.getAllSubCategories().put(category.getName(), category);\r\n        this.categories.put(category.getName(), category);\r\n    }\r\n\r\n    private void initCategory(String category)  {\r\n        File file = new File(generateCategoryFilePath(category));\r\n        JsonFileReader reader = new JsonFileReader();\r\n        try {\r\n            addCategory(reader.read(file, Category.class));\r\n        } catch (FileNotFoundException e) {\r\n            addCategory(new Category(category,new ArrayList<String>(),null));\r\n        }\r\n    }\r\n\r\n    private void initRequests() {\r\n        requests = new ArrayList<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(requestRuntimeTypeAdapter);\r\n        File requestsFile = new File(Config.getInstance().getRequestsPath());\r\n        if (!requestsFile.exists()) {\r\n            requestsFile.mkdirs();\r\n        }\r\n        File[] files = requestsFile.listFiles();\r\n        Arrays.stream(files).map((file) -> {\r\n            try {\r\n                return jsonFileReader.read(file, Request.class);\r\n            } catch (FileNotFoundException e) {\r\n                return null;\r\n            }\r\n        }).forEach(this::addRequest);\r\n    }\r\n\r\n    private void addRequest(Request request) {\r\n        if (!requests.contains(request))\r\n            requests.add(request);\r\n    }\r\n\r\n    public void deleteRequestWithId(int id) {\r\n        for (Request request : requests) {\r\n            if (request.getId() == id) {\r\n                requests.remove(request);\r\n                File file = new File(generateRequestsFilePath(id));\r\n                file.delete();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void initAccounts() {\r\n        accountsByUsername = new HashMap<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(accountRuntimeTypeAdapter);\r\n        for (String s : Config.getInstance().getAccountsPath()) {\r\n            File accountsDirectory = new File(s);\r\n            if (!accountsDirectory.exists()) {\r\n                accountsDirectory.mkdirs();\r\n            }\r\n            initAccountsEach(accountsDirectory, jsonFileReader);\r\n        }\r\n    }\r\n\r\n    private void initAccountsEach(File accountsDirectory, JsonFileReader reader) {\r\n        File[] usersFiles = accountsDirectory.listFiles();\r\n        if (usersFiles != null) {\r\n            Arrays.stream(usersFiles).map((file) -> {\r\n                try {\r\n                    return (Account) reader.read(file, Account.class);\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addAccount);\r\n        }\r\n    }\r\n\r\n    {/*private void initProducts() {\r\n        productsByName = new HashMap<>();\r\n        JsonFileReader reader = new JsonFileReader();\r\n        File productsDirectory = new File(Config.getInstance().getProductsPath());\r\n        if (!productsDirectory.exists())\r\n            productsDirectory.mkdir();\r\n        File[] productsFiles = productsDirectory.listFiles();\r\n        if (productsFiles != null) {\r\n            Arrays.stream(productsFiles).map((file) -> {\r\n                try {\r\n                    Product temp = reader.read(file, Product.class);\r\n                    String var100 = temp.getCategoryName();\r\n                    if (var100 != null && var100 != \"\") {\r\n                        temp.setParent(categories.get(var100));\r\n                        categories.get(var100).getAllProductsInside().put(temp.getName(), temp);\r\n                    }\r\n                    return temp;\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addProduct);\r\n        }\r\n    }*/}\r\n\r\n    private void initDiscounts() {\r\n        discounts = new ArrayList<>();\r\n        JsonFileReader jsonFileReader = new JsonFileReader(discountsRuntimeTypeAdaptor);\r\n        for (String s : Config.getInstance().getDiscountsPath()) {\r\n            File directory = new File(s);\r\n            if (!directory.exists()) {\r\n                directory.mkdirs();\r\n            }\r\n            initDiscountsEach(directory, jsonFileReader);\r\n        }\r\n    }\r\n\r\n    private void initDiscountsEach(File discountsDir, JsonFileReader reader) {\r\n        File[] discountsFileArr = discountsDir.listFiles();\r\n\r\n        if (discountsFileArr != null) {\r\n            Arrays.stream(discountsFileArr).map((file) -> {\r\n                try {\r\n                    if (file.getPath().contains(\"discountcode.accounts.json\") || file.getPath().contains(\"auction.products.json\"))\r\n                        return null;\r\n                    return reader.read(file, Discount.class);\r\n                } catch (FileNotFoundException var4) {\r\n                    return null;\r\n                }\r\n            }).forEach(this::addDiscount);\r\n        }\r\n    }\r\n\r\n\r\n    private void initDiscount(DiscountCode discount) throws Exception {\r\n        JsonFileReader reader = new JsonFileReader();\r\n        try {\r\n            File file = new File(generateDiscountCodeAccountsFilePath(discount.getID()));\r\n            ArrayList<String> strings = reader.read(file, ArrayList.class);\r\n            ArrayList<Account> accounts = new ArrayList<>();\r\n            for (String s : strings) {\r\n                accounts.add(accountsByUsername.get(s));\r\n                accountsByUsername.get(s).addDiscountCode(discount);\r\n            }\r\n            discount.setAllAllowedAccounts(accounts);\r\n            discounts.add(discount);\r\n        } catch (FileNotFoundException var1) {\r\n        }\r\n    }\r\n\r\n    private void initDiscount(Auction auction) throws Exception {\r\n        JsonFileReader reader = new JsonFileReader();\r\n        try {\r\n            File file = new File(generateAuctionProductsFilePath(auction.getID()));\r\n            ArrayList<String> strings = reader.read(file, ArrayList.class);\r\n            ArrayList<Model.ProductsOrganization.Product> products = new ArrayList<>();\r\n            for (String id : strings) {\r\n                products.add(getProductById(id));\r\n            }\r\n            ((Auction) auction).setAllProducts(products);\r\n            discounts.add(auction);\r\n        } catch (FileNotFoundException ignored) {\r\n        }\r\n    }\r\n\r\n    private void addProduct(Model.ProductsOrganization.Product product) {\r\n        if (!productsByName.containsValue(product.getName()))\r\n            productsByName.put(product.getName(), product);\r\n    }\r\n\r\n    private void addAccount(Account account) {\r\n        if (!accountsByUsername.containsValue(account)) {\r\n            account.setAllDiscountCodes(new ArrayList<>());\r\n            accountsByUsername.put(account.getUsername(), account);\r\n        }\r\n    }\r\n\r\n    private void addDiscount(Discount discount) {\r\n        if (!discounts.contains(discount))\r\n            try {\r\n                if (discount instanceof Auction) {\r\n                    initDiscount((Auction) discount);\r\n                } else\r\n                    initDiscount((DiscountCode) discount);\r\n            } catch (Exception exception) {\r\n                return;\r\n                //Logger.log(exception.getMessage())\r\n            }\r\n    }\r\n\r\n    public void saveAccount(Account account) throws IOException {\r\n        if (account instanceof Seller)\r\n            saveAccount((Seller) account);\r\n        if (account instanceof Customer)\r\n            saveAccount((Customer) account);\r\n        if (account instanceof Manager)\r\n            saveAccount((Manager) account);\r\n        addSavedAccount(account);\r\n    }\r\n\r\n    public void saveAccount(Customer customer) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(customer, generateUserFilePath(customer.getUsername(), Config.AccountsPath.CUSTOMER.getNum(), \"customer\"), Account.class);\r\n\r\n    }\r\n\r\n    public void saveAccount(Seller seller) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(seller, generateUserFilePath(seller.getUsername(), Config.AccountsPath.SELLER.getNum(), \"seller\"), Account.class);\r\n    }\r\n\r\n    public void saveAccount(Manager manager) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(accountRuntimeTypeAdapter);\r\n        writer.write(manager, generateUserFilePath(manager.getUsername(), Config.AccountsPath.MANAGER.getNum(), \"manager\"), Account.class);\r\n    }\r\n\r\n\r\n    {  /*public void saveProduct(Product product) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter();\r\n        product.setCategoryName(product.getParent().getName());\r\n        writer.write(product, generateProductFilePath(product.getID()));\r\n        if (!productsByName.containsValue(product))\r\n            productsByName.put(product.getName(), product);\r\n    }*/}\r\n\r\n    public void saveDiscount(Discount discount) throws IOException {\r\n        if (discount instanceof Auction) {\r\n            saveDiscount((Auction) discount);\r\n        } else {\r\n            saveDiscount((DiscountCode) discount);\r\n        }\r\n    }\r\n\r\n    public void saveDiscount(Auction auction) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(discountsRuntimeTypeAdaptor);\r\n        Discount tmp = auction;\r\n        writer.write(tmp, generateAuctionFilePath(auction.getID()), Discount.class);\r\n        ArrayList<String> products = new ArrayList<>();\r\n        for (Model.ProductsOrganization.Product product : auction.getAllProducts()) {\r\n            products.add(product.getID());\r\n        }\r\n        writer.write(products, generateAuctionProductsFilePath(auction.getID()));\r\n        if (!discounts.contains(auction))\r\n            discounts.add(auction);\r\n    }\r\n\r\n    public void saveDiscount(DiscountCode discountCode) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter(discountsRuntimeTypeAdaptor);\r\n        Discount tmp = discountCode;\r\n        writer.write(tmp, generateDiscountCodeFilePath(discountCode.getID()), Discount.class);\r\n        ArrayList<String> accounts = new ArrayList<>();\r\n        for (Account product : discountCode.getAllAllowedAccounts()) {\r\n            accounts.add(product.getUsername());\r\n        }\r\n        new JsonFileWriter().write(accounts, generateDiscountCodeAccountsFilePath(discountCode.getID()));\r\n        if (!discounts.contains(discountCode))\r\n            discounts.add(discountCode);\r\n    }\r\n\r\n    public void saveRequest(Request request) throws IOException {\r\n        JsonFileWriter jsonFileWriter = new JsonFileWriter(requestRuntimeTypeAdapter);\r\n        jsonFileWriter.write(request, generateRequestsFilePath(request.getId()), Request.class);\r\n    }\r\n\r\n    public void saveCategory(Category category) throws IOException {\r\n        JsonFileWriter writer = new JsonFileWriter();\r\n        category.setCategoryPath(category.createCategoryStringPath(category));\r\n        writer.write(category, generateCategoryFilePath(category.getName()));\r\n    }\r\n\r\n    private void addSavedAccount(Account account) {\r\n        if (!accountsByUsername.containsValue(account))\r\n            accountsByUsername.put(account.getUsername(), account);\r\n    }\r\n\r\n    private String generateUserFilePath(String username, int state, String type) {\r\n        String var10000 = Config.getInstance().getAccountsPath()[state] + \"/\" + username;\r\n        return var10000 + \".\" + type + \".json\";\r\n    }\r\n\r\n    {/* private String generateProductFilePath(int id) {\r\n        String var10000 = Config.getInstance().getProductsPath() + \"/\" + id;\r\n        return var10000 + \".product.json\";\r\n    }\r\n*/}\r\n    private String generateAuctionFilePath(String id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.AUCTION.getNum()] + \"/\" + id;\r\n        return var10000 + \".auction.json\";\r\n    }\r\n\r\n    private String generateDiscountCodeFilePath(String id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.DISCOUNTCODE.getNum()] + \"/\" + id;\r\n        return var10000 + \".discountcode.json\";\r\n    }\r\n\r\n    private String generateAuctionProductsFilePath(String id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.AUCTION.getNum()] + \"/\" + id;\r\n        return var10000 + \".auction.products.json\";\r\n    }\r\n\r\n    private String generateDiscountCodeAccountsFilePath(String id) {\r\n        String var10000 = Config.getInstance().getDiscountsPath()[Config.DiscountsPath.DISCOUNTCODE.getNum()] + \"/\" + id;\r\n        return var10000 + \".discountcode.accounts.json\";\r\n    }\r\n\r\n    private String generateRequestsFilePath(int id) {\r\n        String var10000 = Config.getInstance().getRequestsPath() + \"/\" + id;\r\n        return var10000 + \".request.json\";\r\n    }\r\n\r\n    private String generateCategoryFilePath(String name) {\r\n        String var10000 = Config.getInstance().getCategoriesPath() + \"/\" + name;\r\n        return var10000 + \".category.json\";\r\n    }\r\n\r\n    public Account getAccountByName(String name) {\r\n        return accountsByUsername.get(name);\r\n    }\r\n\r\n    public boolean userExistWithUsername(String username) {\r\n        for (String accountUsername : accountsByUsername.keySet()) {\r\n            if (username.equals(accountUsername))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Model.ProductsOrganization.Product getProductById(String id) {\r\n        AtomicReference<Model.ProductsOrganization.Product> temp = new AtomicReference<>();\r\n        productsByName.forEach((k, v) -> {\r\n            if (v != null)\r\n                if (v.getID().equals(id))\r\n                    temp.set(v);\r\n        });\r\n        return temp.get();\r\n    }\r\n\r\n    public Model.ProductsOrganization.Product getProductByName(String name) {\r\n        return productsByName.get(name);\r\n    }\r\n\r\n    public DiscountCode getDiscountcodeWithId(String id) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode && discount.getID().equals(id))\r\n                return (DiscountCode) discount;\r\n        }\r\n        throw new BadRequestException(\"discount not found\");\r\n    }\r\n\r\n    public Auction getAuctionWithId(String id) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof Auction && discount.getID().equals(id))\r\n                return (Auction) discount;\r\n        }\r\n        throw new BadRequestException(\"Auction not found\");\r\n    }\r\n\r\n    public Model.ProductsOrganization.Product getProductWithId(String id) throws BadRequestException {\r\n        for (Model.ProductsOrganization.Product product : productsByName.values()) {\r\n            if (product != null && product.getID().equals(id))\r\n                return product;\r\n        }\r\n        throw new BadRequestException(\"product with this id hasn't found\");\r\n    }\r\n\r\n    public boolean productExistWithId(String id) {\r\n        for (Model.ProductsOrganization.Product product : productsByName.values()) {\r\n            if (product != null && product.getID().equals(id))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean auctionExistsWithId(int id) {\r\n        for (Discount discount : discounts) {\r\n            if (discount != null && discount instanceof Auction && discount.getID().equals(id))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean discountcodeExistsWithId(String id) {\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode && discount.getID().equals(id))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public ArrayList<Request> getAllUnsolvedRequests() {\r\n        return requests;\r\n    }\r\n\r\n    public boolean deleteAccount(String username) throws BadRequestException, IOException {\r\n        Account account = accountsByUsername.get(username);\r\n        for (DiscountCode discountCode : account.getAllDiscountCodes()) {\r\n            deleteAccountFromDiscountCode(discountCode, account.getUsername());\r\n        }\r\n        if (account instanceof Customer)\r\n            return deleteAccount((Customer) account);\r\n        else if (account instanceof Manager)\r\n            return deleteAccount((Manager) account);\r\n        else if (account instanceof Seller)\r\n            return deleteAccount((Seller) account);\r\n        else\r\n            throw new BadRequestException(\"Could not find the username.\", new Throwable(\"Not such username found in Data Center\"));\r\n\r\n    }\r\n\r\n    private void deleteAccountFromDiscountCode(DiscountCode discountCode, String username) {\r\n        discountCode.getAllAllowedAccounts().remove(username);\r\n    }\r\n\r\n    private boolean deleteAccount(Customer customer) {\r\n        File file = new File(generateUserFilePath(customer.getUsername(), Config.AccountsPath.CUSTOMER.getNum(), \"Customer\"));\r\n        customer.getActiveRequestsId().forEach(this::deleteRequestWithId);\r\n        return file.delete() && accountsByUsername.remove(customer.getUsername(), customer);\r\n    }\r\n\r\n    private boolean deleteAccount(Seller seller) throws IOException, BadRequestException {\r\n        File file = new File(generateUserFilePath(seller.getUsername(), Config.AccountsPath.MANAGER.getNum(), \"Manager\"));\r\n        seller.getActiveRequestsId().forEach(this::deleteRequestWithId);\r\n        for (Model.ProductsOrganization.Product product : seller.getAllProducts()) {\r\n            productsByName.remove(product.getName());\r\n        }\r\n        for (String s : seller.getAuctionsId()) {\r\n            deleteAuctionWithId(s);\r\n        }\r\n        seller.getAuctionsId().forEach(this::deleteAuctionWithId);\r\n        return file.delete() && accountsByUsername.remove(seller.getUsername(), seller);\r\n    }\r\n\r\n    public void deleteAuctionWithId(String id) {\r\n        try {\r\n            discounts.remove(getAuctionWithId(id));\r\n            File file = new File(generateAuctionFilePath(id));\r\n            file.delete();\r\n            file = new File(generateAuctionProductsFilePath(id));\r\n            file.delete();\r\n        } catch (BadRequestException ignored) {\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private boolean deleteAccount(Manager manager) {\r\n        File file = new File(generateUserFilePath(manager.getUsername(), Config.AccountsPath.SELLER.getNum(), \"Seller\"));\r\n        return file.delete() && accountsByUsername.remove(manager.getUsername(), manager);\r\n    }\r\n\r\n    public boolean deleteProduct(Model.ProductsOrganization.Product product) throws IOException, BadRequestException {\r\n        ((Seller)getAccountByName(product.getSeller())).getAllProducts().remove(product);\r\n        for (String s : ((Seller) getAccountByName(product.getSeller())).getAuctionsId()) {\r\n            getAuctionWithId(s).removeProduct(product);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    public boolean deleteDiscountCode(DiscountCode discountCode) throws IOException {\r\n        for (Account account : discountCode.getAllAllowedAccounts()) {\r\n            account.getAllDiscountCodes().remove(discountCode);\r\n            saveAccount(account);\r\n        }\r\n        File file = new File(generateDiscountCodeAccountsFilePath(discountCode.getID()));\r\n        return file.delete() && discounts.remove(discountCode);\r\n    }\r\n\r\n    public boolean deleteCategory(Category category) throws IOException {\r\n        for (Model.ProductsOrganization.Product product : category.getAllProductsInside().values()) {\r\n            product.setParent(category.getParent());\r\n        }\r\n        for (Category value : category.getAllSubCategories().values()) {\r\n            value.setParent(category.getParent());\r\n            saveCategory(value);\r\n        }\r\n        File file = new File(generateCategoryFilePath(category.getName()));\r\n        return file.delete() && this.categories.remove(category.getName(), category);\r\n    }\r\n\r\n\r\n    public Set<String> getAllAccountsInfo() {\r\n        return this.accountsByUsername.keySet();\r\n    }\r\n\r\n    public boolean doesUsernameExist(String username) {\r\n        for (String accountUsername : this.accountsByUsername.keySet()) {\r\n            if (username.equals(accountUsername))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean doesProductExist(String productId) {\r\n        for (Model.ProductsOrganization.Product product : productsByName.values()) {\r\n            if (product.getID().equals(productId))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public int getLastDiscountId() {\r\n        return discounts.size();\r\n    }\r\n\r\n    public ArrayList<DiscountCode> getAllDiscountCodes() {\r\n        ArrayList<DiscountCode> allDiscountCodes = new ArrayList<DiscountCode>();\r\n        for (Discount discount : discounts) {\r\n            if (discount instanceof DiscountCode)\r\n                allDiscountCodes.add((DiscountCode) discount);\r\n        }\r\n        return allDiscountCodes;\r\n    }\r\n\r\n    public DiscountCode getDiscountcodeWithCode(String code) throws BadRequestException {\r\n        for (Discount discount : discounts) {\r\n            if (discount != null && discount instanceof DiscountCode)\r\n                if (((DiscountCode) discount).getCode().equals(code))\r\n                    return (DiscountCode) discount;\r\n        }\r\n        throw new BadRequestException(\"discount not found\");\r\n    }\r\n\r\n    public ArrayList<Model.ProductsOrganization.Product> getAllProductsObject() {\r\n        return (ArrayList<Model.ProductsOrganization.Product>) productsByName.values();\r\n    }\r\n    public Set<String> getAllProducts() {\r\n        return  productsByName.keySet();\r\n    }\r\n\r\n    public String getNewDiscountID() {\r\n        //TODO: should be written\r\n        return null;\r\n    }\r\n\r\n    public ArrayList<Category> getCategories() {\r\n        return (ArrayList<Category>) categories.values();\r\n    }\r\n\r\n    public Date getDate() {\r\n        TimeInfo timeInfo = null;\r\n         final String TIME_SERVER = \"time-a.nist.gov\";\r\n        try {\r\n        NTPUDPClient timeClient = new NTPUDPClient();\r\n        InetAddress inetAddress = InetAddress.getByName(TIME_SERVER);\r\n            timeInfo = timeClient.getTime(inetAddress);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        long returnTime = timeInfo.getReturnTime();\r\n        return new Date(returnTime);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/DataBase/DataCenter.java	(revision c7441a830730d0688e10fa36586fecc3ac404ab3)
+++ src/main/java/Controller/DataBase/DataCenter.java	(date 1589728937853)
@@ -84,6 +84,7 @@
         if (!file.exists())
             file.mkdir();
         File[] files = file.listFiles();
+        if(files!=null)
         Arrays.stream(files).map((file1) -> {
             try {
                 return reader.read(file1, Category.class);
