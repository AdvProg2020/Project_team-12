Index: src/main/java/View/Profiles/SellerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View.Profiles;\r\n\r\nimport Controller.CommandProcessors.CommandProcessor;\r\nimport Controller.CommandProcessors.ProfileCP;\r\nimport Controller.CommandProcessors.PurchasePageCP;\r\nimport View.Exceptions.InvalidCommandException;\r\nimport View.Menu;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class SellerProfile extends Profile {\r\n    Profile profile;\r\n\r\n\r\n    public SellerProfile(Profile profile, Menu parentMenu) {\r\n        super(parentMenu);\r\n        this.profile = profile;\r\n        submenus.put(4, getPersonalInfoMenu());\r\n        submenus.put(5, getCompanyHistoryMenu());\r\n        submenus.put(6, getSalesHistoryMenu());\r\n        submenus.put(7, getProductsMenu());\r\n        submenus.put(8, getAddProductMenu());\r\n        submenus.put(9, getCategoriesMenu());\r\n        submenus.put(10, getOffsMenu());\r\n        this.setSubmenus(submenus);\r\n        this.commands = new ArrayList<String>();\r\n        setCommands();\r\n    }\r\n\r\n    private void setCommands() {\r\n        commands.add(\"view personal info\");\r\n        commands.add(\"view company information\");\r\n        commands.add(\"view sales history\");\r\n        commands.add(\"manage products\");\r\n        commands.add(\"add product\");\r\n        commands.add(\"remove product (\\\\d+)$\");\r\n        commands.add(\"show categories\");\r\n        commands.add(\"view offs\");\r\n        commands.add(\"view balance\");\r\n        commands.add(\"back\");\r\n        commands.add(\"help\");\r\n        commands.add(\"go to register panel\");\r\n        commands.add(\"products\");\r\n        commands.add(\"offs\");\r\n    }\r\n\r\n    public HashMap<String, String> getSpecifications(HashMap<String, String> specifications) throws Exception{\r\n        System.out.println(\"add specifications to your product (at least one)\");\r\n        String specificationTitle = getField(\"new specification title\", \"\\\\S+\");\r\n        String specificationValue = getField(\"specification value\", \"\\\\S+\");\r\n        specifications.put(specificationTitle, specificationValue);\r\n        System.out.println(\"type <back> to continue or <next> to add more specifications\");\r\n        String command = getField(\"<next> or <back>\", \"(next|back)$\");\r\n        if (command.equals(\"next\"))\r\n            getSpecifications(specifications);\r\n        return specifications;\r\n    }\r\n\r\n    private Menu getCompanyHistoryMenu() {\r\n        return new Menu(\"Company History\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName());\r\n                System.out.println(\"commands\\n1. back\\n\\n\");\r\n                System.out.println(commandProcessor.getCompanyInfo());\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getSalesHistoryMenu() {\r\n        return new Menu(\"Sales History\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName());\r\n                System.out.println(\"commands\\n1. back\\n\\n\");\r\n                for (int i = 1; i <= commandProcessor.getSalesHistory().size(); i++)\r\n                    System.out.println(i + \". \" + commandProcessor.getSalesHistory().get(i - 1));\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getProductsMenu() {\r\n        return new Menu(\"Products\", this) {\r\n            public void setCommands() {\r\n                commands.add(\"view (\\\\d+)$\");\r\n                commands.add(\"view buyers (\\\\d+)$\");\r\n                commands.add(\"edit (\\\\d+)$\");\r\n                commands.add(\"back\");\r\n                commands.add(\"help\");\r\n            }\r\n\r\n            @Override\r\n            public void show() {\r\n                if (commands.size() == 0) setCommands();\r\n                System.out.println(this.getName() + \"\\n\");\r\n                for (int i = 1; i <= commandProcessor.getAllSellerProducts().size(); i++)\r\n                    System.out.println(i + \". \" + commandProcessor.getAllSellerProducts().get(i - 1));\r\n                showCommands();\r\n            }\r\n\r\n            private void showCommands() {\r\n                System.out.println(\"commands\\n1. view [productId]\\n2. view buyers [productId]\\n3. edit [productId]\\n4. back\\n5. help\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                System.out.println(\"what do you want to do?\\n\");\r\n                String command = scanner.nextLine();\r\n                if (command.matches(commands.get(0))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    System.out.println(commandProcessor.getProductById(commandDetails[1]).toString());\r\n                    return this;\r\n                } else if (command.matches(commands.get(1))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    for (int i = 1; i <= commandProcessor.getProductById(commandDetails[1]).getBuyers().size(); i++)\r\n                        System.out.println(i + \". \" + commandProcessor.getProductById(commandDetails[1]).getBuyers().get(i - 1));\r\n                    return this;\r\n                } else if (command.matches(commands.get(2))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String name = getField(\"name\", \"(\\\\w+)$\");\r\n                    String brand = getField(\"brand\", \"(\\\\w+)$\");\r\n                    String price = getField(\"price\", \"(\\\\d+)\\\\.(\\\\d+)$\");\r\n                    String remainingItems = getField(\"remaining items\", \"(\\\\d+)$\");\r\n                    String description = getField(\"description\", \"\\\\S+\");\r\n                    HashMap<String, String> specifications = new HashMap<String, String>();\r\n                    getSpecifications(specifications);\r\n                    commandProcessor.addProduct(name, brand, price, remainingItems, description, specifications);\r\n                    return this;\r\n                } else if (command.equals(commands.get(3))) {\r\n                    return getGrandFatherMenu();\r\n                } else if (command.equals(commands.get(4))) {\r\n                    showCommands();\r\n                    return this;\r\n                }\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getAddProductMenu() {\r\n        return new Menu(\"add product\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName() + \"\\n\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String id = getField(\"id\", \"(\\\\d+)$\");\r\n                String name = getField(\"name\", \"(\\\\w+)$\");\r\n                String brand = getField(\"brand\", \"(\\\\w+)$\");\r\n                String price = getField(\"price\", \"(\\\\d+)\\\\.(\\\\d+)$\");\r\n                String remainingItems = getField(\"remaining items\", \"(\\\\d+)$\");\r\n                String description = getField(\"description\", \"\\\\S+\");\r\n                HashMap<String, String> specifications = new HashMap<String, String>();\r\n                getSpecifications(specifications);\r\n                commandProcessor.addProduct(name, brand, price, remainingItems, description, specifications);\r\n                return this.parentMenu;\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getCategoriesMenu() {\r\n        return new Menu(\"categories\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName() + \"\\ncommands\\n1. back\");\r\n                for (int i = 1; i <= commandProcessor.getCategories().size(); i++) {\r\n                    System.out.println(i + \". \" + commandProcessor.getCategories().get(i - 1).toString());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getOffsMenu() {\r\n        return new Menu(\"offs\", this) {\r\n            public void setCommands() {\r\n                commands.add(\"view (\\\\d+)$\");\r\n                commands.add(\"edit (\\\\d+)$\");\r\n                commands.add(\"add off\");\r\n                commands.add(\"back\");\r\n                commands.add(\"help\");\r\n            }\r\n\r\n            @Override\r\n            public void show() {\r\n                if (commands.size() == 0) setCommands();\r\n                System.out.println(this.getName() + \"\\n\");\r\n                for (int i = 1; i <= commandProcessor.getAllSellerAuctions().size(); i++)\r\n                    System.out.println(i + \". \" + commandProcessor.getAllSellerAuctions().get(i - 1).toString());\r\n                showCommands();\r\n            }\r\n\r\n            private void showCommands() {\r\n                System.out.println(\"commands\\n1. view [offId]\\n2. edit [offId]\\n3. add off\\n4. back\\n5. help\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                System.out.println(\"what do you want to do?\\n\");\r\n                String command = scanner.nextLine();\r\n                if (command.matches(commands.get(0))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    System.out.println(commandProcessor.getAuctionWithId(commandDetails[1]));\r\n                    return this;\r\n                } else if (command.matches(commands.get(1))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String startingDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String lastDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String percent = getField(\"percent\", \"(\\\\d+)$\");\r\n                    String id = getField(\"auction id\", \"(\\\\d+)$\");\r\n                    //String listOfUsers = getField(\"products' id and separate them by comma\", \"(\\\\w+,)+\");\r\n                    ArrayList<String> products = getAuctionProducts();\r\n                    commandProcessor.addAuction(startingDate, lastDate, percent, id, products);\r\n                    return this;\r\n                } else if (command.matches(commands.get(2))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String startingDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String lastDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String percent = getField(\"percent\", \"(\\\\d+)$\");\r\n                    String id = getField(\"auction id\", \"(\\\\d+)$\");\r\n                    //String listOfProducts = getField(\"products' id and separate them by comma\", \"(\\\\w+,)+\");\r\n                    ArrayList<String> products = getAuctionProducts();\r\n                    commandProcessor.addAuction(startingDate, lastDate, percent, id, products);\r\n                    return this;\r\n                } else if (command.equals(commands.get(3))) {\r\n                    return getGrandFatherMenu();\r\n                } else if (command.equals(commands.get(4))) {\r\n                    showCommands();\r\n                    return this;\r\n                }\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n\r\n            public ArrayList<String> getAuctionProducts() throws Exception{\r\n                ArrayList<String> products = new ArrayList<String>();\r\n                System.out.println(\"enter the id of products that you wanna add to auction (at least one)\");\r\n                String id = getField(\"id\", \"\\\\S+\");\r\n                //TODO: give me the regex of id generator\r\n                //TODO:PR_anyCharacter ->16 characters overall*/\r\n                //See RandomIDGenerator generateProductID;\r\n                products.add(id);\r\n                System.out.println(\"type <back> to continue or <next> to add more products\");\r\n                String command = getField(\"<next> or <back>\", \"(next|back)$\");\r\n                if (command.equals(\"next\"))\r\n                    getAuctionProducts();\r\n                return products;\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void show() {\r\n        System.out.println(this.getName() + \"\\ncommands\\n\");\r\n        for (int i = 1; i <= commands.size(); i++) {\r\n            if (i == 6)\r\n                System.out.println(\"6. remove product [productId]\");\r\n            else\r\n                System.out.println(i + \". \" + commands.get(i - 1));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Menu getCommand() throws Exception {\r\n        String command = scanner.nextLine();\r\n        if (command.equals(commands.get(0))) {\r\n            return submenus.get(4);\r\n        } else if (command.equals(commands.get(1))) {\r\n            return submenus.get(5);\r\n        } else if (command.equals(commands.get(2))) {\r\n            return submenus.get(6);\r\n        } else if (command.equals(commands.get(3))) {\r\n            return submenus.get(7);\r\n        } else if (command.equals(commands.get(4))) {\r\n            return submenus.get(8);\r\n        } else if (command.matches(commands.get(5))) {\r\n            String[] commandDetails = command.split(\"\\\\s\");\r\n            commandProcessor.removeProductWithId(commandDetails[2]);\r\n            return this;\r\n        } else if (command.equals(commands.get(6))) {\r\n            return submenus.get(9);\r\n        } else if (command.equals(commands.get(7))) {\r\n            return submenus.get(10);\r\n        } else if (command.equals(commands.get(8))) {\r\n            commandProcessor.getSellerBalance();\r\n            return this;\r\n        } else if (command.equals(commands.get(9))) {\r\n            CommandProcessor.back();\r\n            return this.parentMenu;\r\n        } else if (command.equals(commands.get(10))) {\r\n            return this;\r\n        } else if (command.equals(commands.get(11))) {\r\n            return submenus.get(1);\r\n        } else if (command.equals(commands.get(12))) {\r\n            return submenus.get(2);\r\n        } else if (command.equals(commands.get(13))) {\r\n            return submenus.get(3);\r\n        }\r\n        throw new InvalidCommandException(\"invalid command\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/View/Profiles/SellerProfile.java	(revision b92f15045927856c894af59fe50c499af4bae05d)
+++ src/main/java/View/Profiles/SellerProfile.java	(date 1589801814991)
@@ -163,7 +163,6 @@
 
             @Override
             public Menu getCommand() throws Exception {
-                String id = getField("id", "(\\d+)$");
                 String name = getField("name", "(\\w+)$");
                 String brand = getField("brand", "(\\w+)$");
                 String price = getField("price", "(\\d+)\\.(\\d+)$");
@@ -236,7 +235,7 @@
                     String id = getField("auction id", "(\\d+)$");
                     //String listOfUsers = getField("products' id and separate them by comma", "(\\w+,)+");
                     ArrayList<String> products = getAuctionProducts();
-                    commandProcessor.addAuction(startingDate, lastDate, percent, id, products);
+                    commandProcessor.addAuction(startingDate, lastDate, percent,  products);
                     return this;
                 } else if (command.matches(commands.get(2))) {
                     String[] commandDetails = command.split("\\s");
Index: src/main/java/Controller/CommandProcessors/ProfileCP.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.CommandProcessors;\r\n\r\nimport Controller.DataBase.DataCenter;\r\nimport Model.Account.Account;\r\nimport Model.Account.Customer;\r\nimport Model.Account.Manager;\r\nimport Model.Account.Seller;\r\nimport Model.Discount.Auction;\r\nimport Model.Discount.DiscountCode;\r\nimport Model.Log.PurchaseLog;\r\nimport Model.Log.SellLog;\r\nimport Model.ProductsOrganization.Category;\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.ProductsOrganization.Score;\r\nimport Model.Request.*;\r\nimport View.Exceptions.CustomerExceptions;\r\nimport View.Exceptions.ProductExceptions;\r\nimport org.apache.commons.net.telnet.EchoOptionHandler;\r\n\r\nimport javax.crypto.spec.DESedeKeySpec;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\n\r\npublic class ProfileCP  extends CommandProcessor {\r\n    private static CommandProcessor Instance;\r\n\r\n    protected ProfileCP() {\r\n        super(MainMenuCP.getInstance());\r\n    }\r\n\r\n    public static CommandProcessor getInstance(){\r\n        if (Instance == null)\r\n            Instance = new ProfileCP();\r\n        return Instance;\r\n    }\r\n\r\n    public String getCompanyInfo() {\r\n        return ((Seller) getLoggedInAccount()).getCompanyInformation();\r\n    }\r\n\r\n    public ArrayList<SellLog> getSalesHistory() {\r\n        return ((Seller) getLoggedInAccount()).getSellLogs();\r\n    }\r\n\r\n    public ArrayList<Product> getAllSellerProducts() {\r\n        return ((Seller) getLoggedInAccount()).getAllProducts();\r\n    }\r\n\r\n    public Product getProductById(String id) throws Exception {\r\n        for (Product product : ((Seller) getLoggedInAccount()).getAllProducts()) {\r\n            if (product.getID().equals(id))\r\n                return product;\r\n        }\r\n        throw new ProductExceptions(\"there is no product with this id\");\r\n    }\r\n\r\n    public ArrayList<Auction> getAllSellerAuctions() {\r\n        ArrayList<Auction> allAuctions = new ArrayList<Auction>();\r\n        for (String auctionId : ((Seller) getLoggedInAccount()).getAuctionsId()) {\r\n            Auction auction = null;\r\n            try {\r\n                auction = dataCenter.getAuctionWithId(auctionId);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            allAuctions.add(auction);\r\n        }\r\n        return allAuctions;\r\n    }\r\n\r\n    public Auction getAuctionWithId(String id) throws Exception {\r\n        return dataCenter.getAuctionWithId(id);\r\n    }\r\n\r\n    public void removeProductWithId(String id) throws Exception {\r\n        if (!dataCenter.doesProductExist(id))\r\n            throw new ProductExceptions(\"there is no product with this id\");\r\n        Product product = getProductById(id);\r\n        if (product.getBuyers().size() == 1) {\r\n            if (!dataCenter.deleteProduct(dataCenter.getProductById(id)))\r\n                throw new ProductExceptions(\"can't delete product\");\r\n        }\r\n\r\n    }\r\n\r\n    public String getSellerBalance() {\r\n        return Double.toString(((Seller) getLoggedInAccount()).getCredit());\r\n    }\r\n\r\n    public ArrayList<PurchaseLog> getCustomerOrdersHistory() {\r\n        return ((Customer) getLoggedInAccount()).getBuyLogs();\r\n    }\r\n\r\n    public PurchaseLog getOrderById(String orderId) throws Exception {\r\n        for (PurchaseLog order : getCustomerOrdersHistory()) {\r\n            if (order.getId().equals(orderId))\r\n                return order;\r\n        }\r\n        throw new CustomerExceptions(\"there is no order with this id\");\r\n    }\r\n\r\n    public String getCustomerBalance() {\r\n        return Double.toString(((Customer) getLoggedInAccount()).getCredit());\r\n    }\r\n\r\n    public ArrayList<DiscountCode> getCustomerDiscountCodes() {\r\n        return ((Customer) getLoggedInAccount()).getAllDiscountCodes();\r\n    }\r\n\r\n    public void rate(String productId, String score) throws Exception {\r\n        if (!dataCenter.doesProductExist(productId))\r\n            throw new ProductExceptions(\"there is no product with this id\");\r\n        Product product = dataCenter.getProductById(productId);\r\n        Score newScore = new Score(Double.parseDouble(score));\r\n        product.submitScore(newScore);\r\n        dataCenter.saveAccount(dataCenter.getAccountByName(product.getSeller()));\r\n    }\r\n\r\n    public void addProduct(String name, String brand, String price, String remainingItems, String description, HashMap<String, String> specifications) throws Exception {\r\n        Seller seller = (Seller) getLoggedInAccount();\r\n        Product product = new Product(name, seller.getUsername(), Integer.parseInt(remainingItems),\r\n                Double.parseDouble(price), brand, specifications, description, Integer.toString(dataCenter.getAllProducts().size()), dataCenter.getDate());\r\n        //TODO: Id generator should be written\r\n        Request request = new ProductRequest(seller.getUsername(),\r\n                dataCenter.requestIDGenerator(seller), false, product.getID());\r\n        seller.addProduct(product);\r\n        seller.addRequest(request);\r\n        dataCenter.addProduct(product);\r\n        dataCenter.addRequest(request);\r\n        dataCenter.saveAccount(seller);\r\n        dataCenter.saveRequest(request);\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(){\r\n        return dataCenter.getCategories();\r\n    }\r\n\r\n    public void addAuction(String startingDate, String lastDate, String percent, String id,ArrayList<String> products) throws Exception{\r\n        Seller seller = (Seller)getLoggedInAccount();\r\n        DateFormat format = new SimpleDateFormat(\"yy/mm/dd\", Locale.ENGLISH);\r\n        ArrayList<Product> auctionProducts = new ArrayList<Product>();\r\n        for (String productId : products) {\r\n            auctionProducts.add(dataCenter.getProductById(productId));\r\n        }\r\n        Auction auction = new Auction(format.parse(startingDate), format.parse(lastDate),Double.parseDouble(percent),id,auctionProducts,seller.getUsername());\r\n        //TODO: Id generator should be written\r\n        Request request = new AuctionRequest(seller.getUsername(),dataCenter.requestIDGenerator(seller),false,auction.getID());\r\n        seller.addAuctionId(id);\r\n        seller.addRequest(request);\r\n        dataCenter.addRequest(request);\r\n        dataCenter.addDiscount(auction);//TODO:is this needed here ?? or after accept??\r\n        dataCenter.saveDiscount(auction);//TODO:is this needed here ??\r\n        dataCenter.saveAccount(seller);\r\n        dataCenter.saveRequest(request);\r\n    }\r\n\r\n    public void createManagerAccount(String username, String password, String name, String lastName, String phoneNumber, String emailAddress) throws Exception {\r\n        Account manager = new Manager(username, name, lastName, emailAddress, phoneNumber, password);\r\n        dataCenter.saveAccount(manager);\r\n    }\r\n\r\n    public ArrayList<Request> getRequests() {\r\n        return dataCenter.getAllUnsolvedRequests();\r\n    }\r\n\r\n    public String  showRequestDetail(String commandDetail) throws Exception {\r\n         return dataCenter.getRequestWithId(commandDetail).showDetails();\r\n    }\r\n\r\n    public void acceptRequest(String commandDetail) throws Exception {\r\n        dataCenter.getRequestWithId(commandDetail).acceptRequest();\r\n    }\r\n\r\n    public void declineRequest(String commandDetail) throws Exception {\r\n        ((NoCauseDecline)dataCenter.getRequestWithId(commandDetail)).declineRequest();\r\n    }\r\n\r\n    public void declineRequest(String commandDetail, String cause) throws Exception {\r\n        ((DeclineHasCause)dataCenter.getRequestWithId(commandDetail)).declineRequest(cause);\r\n    }\r\n\r\n    public boolean checkRequestType(String commandDetail) throws Exception {\r\n        return dataCenter.getRequestWithId(commandDetail) instanceof DeclineHasCause;\r\n    }\r\n\r\n    public void addCategory(String categoryName, String parentCategoryName, ArrayList<String> specifications) throws Exception {\r\n        Category parentCategory = null;\r\n        for (Category category : dataCenter.getCategories()) {\r\n            if (category.getName().equals(parentCategoryName))\r\n                parentCategory = category;\r\n        }\r\n        if (parentCategory == null)\r\n            throw new CustomerExceptions(\"parent category doesn't exist\");\r\n        Category newCategory = new Category(categoryName, specifications, parentCategory);\r\n        dataCenter.saveCategory(newCategory);\r\n    }\r\n\r\n    public boolean doesCategoryExistsWithThisName(String name) {\r\n        for (Category category : dataCenter.getCategories()) {\r\n            if (category.getName().equals(name))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void removeCategory(String categoryName) throws Exception {\r\n        if (!doesCategoryExistsWithThisName(categoryName))\r\n            throw new CustomerExceptions(\"category with this name doesn't exist\");\r\n        Category categoryToBeDeleted = null;\r\n        for (Category category : dataCenter.getCategories()) {\r\n            if (category.getName().equals(categoryName))\r\n                categoryToBeDeleted = category;\r\n        }\r\n        dataCenter.deleteCategory(categoryToBeDeleted);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/CommandProcessors/ProfileCP.java	(revision b92f15045927856c894af59fe50c499af4bae05d)
+++ src/main/java/Controller/CommandProcessors/ProfileCP.java	(date 1589803086771)
@@ -122,8 +122,8 @@
     public void addProduct(String name, String brand, String price, String remainingItems, String description, HashMap<String, String> specifications) throws Exception {
         Seller seller = (Seller) getLoggedInAccount();
         Product product = new Product(name, seller.getUsername(), Integer.parseInt(remainingItems),
-                Double.parseDouble(price), brand, specifications, description, Integer.toString(dataCenter.getAllProducts().size()), dataCenter.getDate());
-        //TODO: Id generator should be written
+                Double.parseDouble(price), brand, specifications, description,dataCenter.getNewProductID(), dataCenter.getDate());
+
         Request request = new ProductRequest(seller.getUsername(),
                 dataCenter.requestIDGenerator(seller), false, product.getID());
         seller.addProduct(product);
@@ -138,21 +138,23 @@
         return dataCenter.getCategories();
     }
 
-    public void addAuction(String startingDate, String lastDate, String percent, String id,ArrayList<String> products) throws Exception{
+    public void addAuction(String startingDate, String lastDate, String percent,ArrayList<String> products) throws Exception{
         Seller seller = (Seller)getLoggedInAccount();
         DateFormat format = new SimpleDateFormat("yy/mm/dd", Locale.ENGLISH);
         ArrayList<Product> auctionProducts = new ArrayList<Product>();
         for (String productId : products) {
             auctionProducts.add(dataCenter.getProductById(productId));
         }
-        Auction auction = new Auction(format.parse(startingDate), format.parse(lastDate),Double.parseDouble(percent),id,auctionProducts,seller.getUsername());
-        //TODO: Id generator should be written
-        Request request = new AuctionRequest(seller.getUsername(),dataCenter.requestIDGenerator(seller),false,auction.getID());
-        seller.addAuctionId(id);
+        Auction auction = new Auction(format.parse(startingDate), format.parse(lastDate),Double.parseDouble(percent),
+                dataCenter.getNewDiscountID(),auctionProducts,seller.getUsername());
+
+        Request request = new AuctionRequest(seller.getUsername(),dataCenter.requestIDGenerator(seller),false,
+                auction.getID());
+        seller.addAuctionId(auction.getID());
         seller.addRequest(request);
         dataCenter.addRequest(request);
-        dataCenter.addDiscount(auction);//TODO:is this needed here ?? or after accept??
-        dataCenter.saveDiscount(auction);//TODO:is this needed here ??
+        dataCenter.addDiscount(auction);
+        dataCenter.saveDiscount(auction);
         dataCenter.saveAccount(seller);
         dataCenter.saveRequest(request);
     }
