Index: src/main/java/View/Profiles/SellerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View.Profiles;\r\n\r\nimport Controller.CommandProcessors.CommandProcessor;\r\nimport View.Exceptions.InvalidCommandException;\r\nimport View.Menu;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class SellerProfile extends Profile {\r\n    Profile profile;\r\n    CommandProcessor commandProcessor = CommandProcessor.getInstance();\r\n\r\n    public SellerProfile(Profile profile, Menu parentMenu) {\r\n        super(parentMenu);\r\n        this.profile = profile;\r\n        submenus.put(4, getPersonalInfoMenu());\r\n        submenus.put(5, getCompanyHistoryMenu());\r\n        submenus.put(6, getSalesHistoryMenu());\r\n        submenus.put(7, getProductsMenu());\r\n        submenus.put(8, getAddProductMenu());\r\n        submenus.put(9, getCategoriesMenu());\r\n        submenus.put(10, getOffsMenu());\r\n        this.setSubmenus(submenus);\r\n        this.commands = new ArrayList<String>();\r\n        setCommands();\r\n    }\r\n\r\n    private void setCommands() {\r\n        commands.add(\"view personal info\");\r\n        commands.add(\"view company information\");\r\n        commands.add(\"view sales history\");\r\n        commands.add(\"manage products\");\r\n        commands.add(\"add product\");\r\n        commands.add(\"remove product (\\\\d+)$\");\r\n        commands.add(\"show categories\");\r\n        commands.add(\"view offs\");\r\n        commands.add(\"view balance\");\r\n        commands.add(\"back\");\r\n        commands.add(\"help\");\r\n        commands.add(\"go to register panel\");\r\n        commands.add(\"products\");\r\n        commands.add(\"offs\");\r\n    }\r\n\r\n    private Menu getCompanyHistoryMenu() {\r\n        return new Menu(\"Company History\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName());\r\n                System.out.println(\"commands\\n1. back\\n\\n\");\r\n                System.out.println(CommandProcessor.getCompanyInfo());\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getSalesHistoryMenu() {\r\n        return new Menu(\"Sales History\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName());\r\n                System.out.println(\"commands\\n1. back\\n\\n\");\r\n                for (int i = 1; i <= CommandProcessor.getSalesHistory().size(); i++)\r\n                    System.out.println(i + \". \" + CommandProcessor.getSalesHistory().get(i - 1));\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getProductsMenu() {\r\n        return new Menu(\"Products\", this) {\r\n            public void setCommands() {\r\n                commands.add(\"view (\\\\d+)$\");\r\n                commands.add(\"view buyers (\\\\d+)$\");\r\n                commands.add(\"edit (\\\\d+)$\");\r\n                commands.add(\"back\");\r\n                commands.add(\"help\");\r\n            }\r\n\r\n            @Override\r\n            public void show() {\r\n                if (commands.size() == 0) setCommands();\r\n                System.out.println(this.getName() + \"\\n\");\r\n                for (int i = 1; i <= commandProcessor.getAllSellerProducts().size(); i++)\r\n                    System.out.println(i + \". \" + commandProcessor.getAllSellerProducts().get(i - 1));\r\n                showCommands();\r\n            }\r\n\r\n            private void showCommands() {\r\n                System.out.println(\"commands\\n1. view [productId]\\n2. view buyers [productId]\\n3. edit [productId]\\n4. back\\n5. help\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                System.out.println(\"what do you want to do?\\n\");\r\n                String command = scanner.nextLine();\r\n                if (command.matches(commands.get(0))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    System.out.println(commandProcessor.getProductById(commandDetails[1]).toString());\r\n                    return this;\r\n                } else if (command.matches(commands.get(1))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    for (int i = 1; i <= commandProcessor.getProductById(commandDetails[1]).getBuyers().size(); i++)\r\n                        System.out.println(i + \". \" + commandProcessor.getProductById(commandDetails[1]).getBuyers().get(i - 1));\r\n                    return this;\r\n                } else if (command.matches(commands.get(2))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String name = getField(\"name\", \"(\\\\w+)$\");\r\n                    String brand = getField(\"brand\", \"(\\\\w+)$\");\r\n                    String price = getField(\"price\", \"(\\\\d+)\\\\.(\\\\d+)$\");\r\n                    String category = getField(\"category\", \"(\\\\w+)$\");\r\n                    String remainingItems = getField(\"remaining items\", \"(\\\\d+)$\");\r\n                    String description = getField(\"description\", \"\\\\S+\");\r\n                    //request to edit product\r\n                    return this;\r\n                } else if (command.equals(commands.get(3))) {\r\n                    return getGrandFatherMenu();\r\n                } else if (command.equals(commands.get(4))) {\r\n                    showCommands();\r\n                    return this;\r\n                }\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getAddProductMenu() {\r\n        return new Menu(\"add product\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName() + \"\\n\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String id = getField(\"id\", \"(\\\\d+)$\");\r\n                String name = getField(\"name\", \"(\\\\w+)$\");\r\n                String brand = getField(\"brand\", \"(\\\\w+)$\");\r\n                String price = getField(\"price\", \"(\\\\d+)\\\\.(\\\\d+)$\");\r\n                String category = getField(\"category\", \"(\\\\w+)$\");\r\n                String remainingItems = getField(\"remaining items\", \"(\\\\d+)$\");\r\n                String description = getField(\"description\", \"\\\\S+\");\r\n                //call add product method and request\r\n                return this.parentMenu;\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getCategoriesMenu() {\r\n        return new Menu(\"categories\", this) {\r\n            @Override\r\n            public void show() {\r\n                System.out.println(this.getName() + \"\\ncommands\\n1. back\");\r\n                //get categories and show\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                String command = scanner.nextLine();\r\n                if (command.equals(\"back\"))\r\n                    return this.parentMenu;\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    private Menu getOffsMenu() {\r\n        return new Menu(\"offs\", this) {\r\n            public void setCommands() {\r\n                commands.add(\"view (\\\\d+)$\");\r\n                commands.add(\"edit (\\\\d+)$\");\r\n                commands.add(\"add off\");\r\n                commands.add(\"back\");\r\n                commands.add(\"help\");\r\n            }\r\n\r\n            @Override\r\n            public void show() {\r\n                if (commands.size() == 0) setCommands();\r\n                System.out.println(this.getName() + \"\\n\");\r\n                for (int i = 1; i <= commandProcessor.getAllSellerAuctions().size(); i++)\r\n                    System.out.println(i + \". \"+commandProcessor.getAllSellerAuctions().get(i-1).toString());\r\n                    showCommands();\r\n            }\r\n\r\n            private void showCommands() {\r\n                System.out.println(\"commands\\n1. view [offId]\\n2. edit [offId]\\n3. add off\\n4. back\\n5. help\");\r\n            }\r\n\r\n            @Override\r\n            public Menu getCommand() throws Exception {\r\n                System.out.println(\"what do you want to do?\\n\");\r\n                String command = scanner.nextLine();\r\n                if (command.matches(commands.get(0))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    System.out.println(commandProcessor.getAuctionWithId(commandDetails[1]));\r\n                    return this;\r\n                } else if (command.matches(commands.get(1))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String lastDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String percent = getField(\"percent\", \"(\\\\d+)$\");\r\n                    String id = getField(\"auction id\", \"(\\\\d+)$\");\r\n                    String listOfUsers = getField(\"products' id and separate them by comma\", \"(\\\\w+,)+\");\r\n                    //request edit auction\r\n                    return this;\r\n                } else if (command.matches(commands.get(2))) {\r\n                    String[] commandDetails = command.split(\"\\\\s\");\r\n                    String lastDate = getField(\"last date\", \"(\\\\d\\\\d)/(\\\\d\\\\d)/(\\\\d\\\\d)$\");\r\n                    String percent = getField(\"percent\", \"(\\\\d+)$\");\r\n                    String id = getField(\"auction id\", \"(\\\\d+)$\");\r\n                    String listOfProducts = getField(\"products' id and separate them by comma\", \"(\\\\w+,)+\");\r\n                    //request add auction\r\n                    return this;\r\n                } else if (command.equals(commands.get(3))) {\r\n                    return getGrandFatherMenu();\r\n                } else if (command.equals(commands.get(4))) {\r\n                    showCommands();\r\n                    return this;\r\n                }\r\n                throw new InvalidCommandException(\"invalid command\");\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void show() {\r\n        System.out.println(this.getName() + \"\\ncommands\\n\");\r\n        for (int i = 1; i <= commands.size(); i++) {\r\n            if (i == 6)\r\n                System.out.println(\"6. remove product [productId]\");\r\n            else\r\n                System.out.println(i + \". \" + commands.get(i - 1));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Menu getCommand() throws Exception {\r\n        String command = scanner.nextLine();\r\n        if (command.equals(commands.get(0))) {\r\n            return submenus.get(4);\r\n        } else if (command.equals(commands.get(1))) {\r\n            return submenus.get(5);\r\n        } else if (command.equals(commands.get(2))) {\r\n            return submenus.get(6);\r\n        } else if (command.equals(commands.get(3))) {\r\n            return submenus.get(7);\r\n        } else if (command.equals(commands.get(4))) {\r\n            return submenus.get(8);\r\n        } else if (command.matches(commands.get(5))) {\r\n            String[] commandDetails = command.split(\"\\\\s\");\r\n            commandProcessor.removeProductWithId(commandDetails[2]);\r\n            return this;\r\n        } else if (command.equals(commands.get(6))) {\r\n            return submenus.get(9);\r\n        } else if (command.equals(commands.get(7))) {\r\n            return submenus.get(10);\r\n        } else if (command.equals(commands.get(8))) {\r\n            commandProcessor.getSellerBalance();\r\n            return this;\r\n        } else if (command.equals(commands.get(9))) {\r\n            return this.parentMenu;\r\n        } else if (command.equals(commands.get(10))) {\r\n            return this;\r\n        } else if (command.equals(commands.get(11))) {\r\n            return submenus.get(1);\r\n        } else if (command.equals(commands.get(12))) {\r\n            return submenus.get(2);\r\n        } else if (command.equals(commands.get(13))) {\r\n            return submenus.get(3);\r\n        }\r\n        throw new InvalidCommandException(\"invalid command\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/View/Profiles/SellerProfile.java	(revision 3d2339b18595e9c3092f77def07b81769ac35f5f)
+++ src/main/java/View/Profiles/SellerProfile.java	(date 1589624554116)
@@ -48,7 +48,7 @@
             public void show() {
                 System.out.println(this.getName());
                 System.out.println("commands\n1. back\n\n");
-                System.out.println(CommandProcessor.getCompanyInfo());
+                System.out.println(CommandProcessor.getLoggedInAccount().getCompanyInfo());
             }
 
             @Override
Index: src/main/java/Model/Log/PurchaseLog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model.Log;\r\n\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.ProductsOrganization.ProductOnLog;\r\nimport com.google.gson.annotations.Expose;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\npublic class PurchaseLog extends Log {\r\n    @Expose\r\n    private int payedCredit;\r\n    @Expose\r\n    private int finalPrice;\r\n    @Expose\r\n    private ArrayList<ProductOnLog> allPurchasedProducts;\r\n\r\n    public PurchaseLog(int id, Date date) {\r\n        super(id, date);\r\n    }\r\n\r\n    private enum Status {DELIVERED, TO_BE_DELIVERED}\r\n    private Status status;\r\n\r\n\r\n    public boolean hasBoughtProduct(int productId){return true;}\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"PurchaseLog{}\";\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Model/Log/PurchaseLog.java	(revision 3d2339b18595e9c3092f77def07b81769ac35f5f)
+++ src/main/java/Model/Log/PurchaseLog.java	(date 1589624024916)
@@ -1,6 +1,5 @@
 package Model.Log;
 
-import Model.ProductsOrganization.Product;
 import Model.ProductsOrganization.ProductOnLog;
 import com.google.gson.annotations.Expose;
 
@@ -14,19 +13,20 @@
     private int finalPrice;
     @Expose
     private ArrayList<ProductOnLog> allPurchasedProducts;
+    private Status status;
 
     public PurchaseLog(int id, Date date) {
         super(id, date);
     }
 
-    private enum Status {DELIVERED, TO_BE_DELIVERED}
-    private Status status;
-
-
-    public boolean hasBoughtProduct(int productId){return true;}
+    public boolean hasBoughtProduct(int productId) {
+        return true;
+    }
 
     @Override
     public String toString() {
         return "PurchaseLog{}";
     }
+
+    private enum Status {DELIVERED, TO_BE_DELIVERED}
 }
\ No newline at end of file
Index: src/main/java/Controller/CommandProcessors/CommandProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller.CommandProcessors;\r\n\r\nimport Controller.DataBase.Config;\r\nimport Controller.DataBase.DataCenter;\r\nimport Model.Account.Account;\r\nimport Model.Account.Customer;\r\nimport Model.Account.Manager;\r\nimport Model.Account.Seller;\r\nimport Model.Account.*;\r\nimport Model.Discount.Auction;\r\nimport Model.Discount.Discount;\r\nimport Model.Discount.DiscountCode;\r\nimport Model.Log.PurchaseLog;\r\nimport Model.Log.SellLog;\r\nimport Model.ProductsOrganization.Cart;\r\nimport Model.ProductsOrganization.Product;\r\nimport Model.ProductsOrganization.ProductInfo;\r\nimport Model.ProductsOrganization.Score;\r\nimport View.Exceptions.CustomerExceptions;\r\nimport View.Exceptions.InvalidCommandException;\r\nimport View.Exceptions.ProductExceptions;\r\nimport View.Exceptions.RegisterPanelException;\r\n\r\nimport java.io.File;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Locale;\r\nimport java.util.Set;\r\n\r\npublic class CommandProcessor {\r\n    protected static CommandProcessor Instance;\r\n    private static CommandProcessor Primitive;\r\n    private CommandProcessor Parent;\r\n    private static Account loggedInAccount;\r\n    private DataCenter dataCenter;\r\n    private static Cart cart = new Cart(null);\r\n    public CommandProcessor(CommandProcessor parent) {\r\n        Parent = parent;\r\n        this.loggedInAccount = null;\r\n        this.dataCenter = DataCenter.getInstance();\r\n    }\r\n\r\n    public static CommandProcessor getInstance() {\r\n        if (Instance == null) {\r\n            Instance = MainMenuCP.getInstance();\r\n            Primitive = Instance;\r\n        }\r\n        return Instance;\r\n    }\r\n\r\n    public static void setInstance(CommandProcessor instance) {\r\n        Instance = instance;\r\n    }\r\n\r\n    public static boolean managerExists() {\r\n        File file = new File(Config.getInstance().getAccountsPath()[Config.AccountsPath.MANAGER.getNum()]);\r\n        if (!file.exists() || file.listFiles().length == 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public static CommandProcessor getPrimitive() {\r\n        getInstance();\r\n        return Primitive;\r\n    }\r\n\r\n    public static void setPrimitive(CommandProcessor primitive) {\r\n        Primitive = primitive;\r\n    }\r\n\r\n    public static void back() {\r\n        Instance = Instance.getParent();\r\n    }\r\n\r\n    public static void goToSubCommandProcessor(int ID) throws Exception {\r\n        switch (ID) {\r\n            case 1:\r\n                AuctionsPageCP.getInstance().setParent(Instance);\r\n                Instance = AuctionsPageCP.getInstance();\r\n                break;\r\n            case 2:\r\n                MainMenuCP.getInstance().setParent(Instance);\r\n                Instance = MainMenuCP.getInstance();\r\n                break;\r\n            case 3:\r\n                ProductPageCP.getInstance().setParent(Instance);\r\n                Instance = ProductPageCP.getInstance();\r\n                break;\r\n            case 4:\r\n                ProductsPageCP.getInstance().setParent(Instance);\r\n                Instance = ProductsPageCP.getInstance();\r\n                break;\r\n            case 5:\r\n                ProfileCP.getInstance().setParent(Instance);\r\n                Instance = ProfileCP.getInstance();\r\n                break;\r\n            case 6:\r\n                PurchasePageCP.getInstance().setParent(Instance);\r\n                Instance = PurchasePageCP.getInstance();\r\n                break;\r\n            case 7:\r\n                RegisterPanelCP.getInstance().setParent(Instance);\r\n                Instance = RegisterPanelCP.getInstance();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static Cart getCart() {\r\n        return cart;\r\n    }\r\n\r\n    public static void setCart(Cart cart) {\r\n        CommandProcessor.cart = cart;\r\n    }\r\n\r\n    public String getProfileType() {\r\n        if (loggedInAccount instanceof Customer)\r\n            return \"customer\";\r\n        else if (loggedInAccount instanceof Seller)\r\n            return \"seller\";\r\n        else if (loggedInAccount instanceof Manager)\r\n            return \"manager\";\r\n        else\r\n            return \"not logged in\";\r\n    }\r\n\r\n    public void setLoggedInAccount(Account loggedInAccount) {\r\n        this.loggedInAccount = loggedInAccount;\r\n    }\r\n\r\n    public void createAccount(String username, String role, String password, String name, String lastName, String phoneNumber, String emailAddress, String companyInfo) throws Exception {\r\n        Account newAccount;\r\n        if (role.equals(\"customer\")) {\r\n            newAccount = new Customer(username, name, lastName, emailAddress, phoneNumber, password);\r\n            dataCenter.saveAccount((Customer) newAccount);\r\n        } else if (role.equals(\"seller\")) {\r\n            newAccount = new Seller(username, name, lastName, emailAddress, phoneNumber, password, companyInfo);\r\n            //send a request to manager\r\n        }\r\n    }\r\n\r\n    public void createManagerAccount(String username, String password, String name, String lastName, String phoneNumber, String emailAddress) throws Exception {\r\n        Manager manager = new Manager(username, name, lastName, emailAddress, phoneNumber, password);\r\n        dataCenter.saveAccount(manager);\r\n    }\r\n\r\n    public void login(String username, String password) throws Exception {\r\n        setLoggedInAccount(dataCenter.getAccountByName(username));\r\n        if (!checkPassword(password)) {\r\n            setLoggedInAccount(null);\r\n            throw new RegisterPanelException(\"incorrect password\");\r\n        }\r\n    }\r\n\r\n    public boolean doesUsernameExists(String username) {\r\n        return dataCenter.userExistWithUsername(username);\r\n    }\r\n\r\n\r\n    public boolean checkPassword(String password) {\r\n        if (this.loggedInAccount.getPassword().equals(password))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    public String getPersonalInfo() {\r\n        return loggedInAccount.getPersonalInfo();\r\n    }\r\n\r\n    public String getPersonalInfo(String username) {\r\n        Account account = dataCenter.getAccountByName(username);\r\n        return account.getPersonalInfo();\r\n    }\r\n\r\n    public void editPersonalInfo(String field, String newValue) throws Exception {\r\n        if ((field.equals(\"first name\") || field.equals(\"last name\")) && !newValue.matches(\"\\\\w+\")) {\r\n            throw new InvalidCommandException(\"illegal field input\");\r\n        } else if (field.equals(\"phone number\") && !newValue.matches(\"(\\\\d+)$\")) {\r\n            throw new InvalidCommandException(\"invalid field input\");\r\n        } else if (field.equals(\"email address\") && !newValue.matches(\"(\\\\w+)@(\\\\w+)\\\\.(\\\\w+)$\")) {\r\n            throw new InvalidCommandException(\"invalid field input\");\r\n        } else if (field.equals(\"password\") && !newValue.matches(\"\\\\S+\")) {\r\n            throw new InvalidCommandException(\"invalid field input\");\r\n        }\r\n        if (field.equals(\"first name\"))\r\n            this.loggedInAccount.setFirstName(newValue);\r\n        else if (field.equals(\"last name\"))\r\n            this.loggedInAccount.setLastName(newValue);\r\n        else if (field.equals(\"phone number\"))\r\n            this.loggedInAccount.setPhoneNumber(newValue);\r\n        else if (field.equals(\"email address\"))\r\n            this.loggedInAccount.setEmailAddress(newValue);\r\n        else if (field.equals(\"password\"))\r\n            this.loggedInAccount.setPassword(newValue);\r\n        dataCenter.saveAccount(loggedInAccount);\r\n    }\r\n\r\n    public Set<String> getAllAccountsInfo() {\r\n        //this method is only used for manager\r\n        return dataCenter.getAllAccountsInfo();\r\n    }\r\n\r\n    public void deleteDiscountCode(String code) throws Exception {\r\n        DiscountCode discountCode = dataCenter.getDiscountcodeWithCode(code);\r\n        dataCenter.deleteDiscountCode(discountCode);\r\n\r\n        //should i delete it for each customer ??\r\n        //no need to delete it for each customer it has been handled in data center\r\n    }\r\n\r\n    public void deleteAccount(String username) throws Exception {\r\n        if (!dataCenter.doesUsernameExist(username))\r\n            throw new RegisterPanelException(\"username doesn't exist\");\r\n        if (!dataCenter.deleteAccount(username))\r\n            throw new RegisterPanelException(\"can't delete this account\");\r\n    }\r\n\r\n    public void deleteProduct(String productId) throws Exception {\r\n        if (!dataCenter.doesProductExist(productId))\r\n            throw new RegisterPanelException(\"product doesn't exist\");\r\n        if (!dataCenter.deleteProduct(dataCenter.getProductById(Integer.parseInt(productId))))\r\n            throw new ProductExceptions(\"can't delete this product\");\r\n    }\r\n\r\n    public Set<String> getAllProducts() {\r\n        return dataCenter.getAllProducts();\r\n    }\r\n\r\n    public void createDiscountCode(String startingDate, String lastDate, String percent, String code, String maximumAmount, String numberOfUsages, String listOfUsers) throws Exception {\r\n        ArrayList<Account> usersList = new ArrayList<Account>();\r\n        String[] users = listOfUsers.split(\"\\\\s\");\r\n        for (String username : users) {\r\n            usersList.add(dataCenter.getAccountByName(username));\r\n        }\r\n        DateFormat format = new SimpleDateFormat(\"yy/mm/dd\", Locale.ENGLISH);\r\n        DiscountCode discountCode = new DiscountCode(format.parse(startingDate), format.parse(lastDate), Double.parseDouble(percent),\r\n                dataCenter.getLastDiscountId() + 1, code, Integer.parseInt(maximumAmount), Integer.parseInt(numberOfUsages), usersList);\r\n        dataCenter.saveDiscount(discountCode);\r\n    }\r\n\r\n    public ArrayList<DiscountCode> getAllDiscountCodes() {\r\n        return dataCenter.getAllDiscountCodes();\r\n    }\r\n\r\n    public DiscountCode getDiscountCode(String code) throws Exception {\r\n        return dataCenter.getDiscountcodeWithCode(code);\r\n    }\r\n\r\n    public void editDiscountCode(String code, String startingDate, String lastDate, String percent, String maximumAmount, String numberOfUsages, String listOfUsers) throws Exception {\r\n        DiscountCode discountCode = dataCenter.getDiscountcodeWithCode(code);\r\n        ArrayList<Account> usersList = new ArrayList<Account>();\r\n        String[] users = listOfUsers.split(\"\\\\s\");\r\n        for (String username : users) {\r\n            usersList.add(dataCenter.getAccountByName(username));\r\n        }\r\n        DateFormat format = new SimpleDateFormat(\"yy/mm/dd\", Locale.ENGLISH);\r\n        discountCode.setStart(format.parse(startingDate));\r\n        discountCode.setEnd(format.parse(lastDate));\r\n        discountCode.setPercent(Double.parseDouble(percent));\r\n        discountCode.setMaximumDiscountAmount(Integer.parseInt(maximumAmount));\r\n        discountCode.setMaximumNumberOfUsages(Integer.parseInt(numberOfUsages));\r\n        discountCode.setAllAllowedAccounts(usersList);\r\n        dataCenter.saveDiscount(discountCode);\r\n    }\r\n\r\n    //seller\r\n    public String getCompanyInfo() {\r\n        return ((Seller) this.loggedInAccount).getCompanyInformation();\r\n    }\r\n\r\n    public ArrayList<SellLog> getSalesHistory() {\r\n        return ((Seller) this.loggedInAccount).getSellLogs();\r\n    }\r\n\r\n    public ArrayList<ProductInfo> getAllSellerProducts() {\r\n        return ((Seller) this.loggedInAccount).getAllProducts();\r\n    }\r\n\r\n    public ProductInfo getProductById(String id) throws Exception {\r\n        for (ProductInfo product : ((Seller) this.loggedInAccount).getAllProducts()) {\r\n            if (Integer.toString(product.getId()).equals(id))\r\n                return product;\r\n        }\r\n        throw new ProductExceptions(\"there is no product with this id\");\r\n    }\r\n\r\n    public ArrayList<Auction> getAllSellerAuctions() {\r\n        ArrayList<Auction> allAuctions = new ArrayList<Auction>();\r\n        for (Integer auctionId : ((Seller) this.loggedInAccount).getAuctionsId()) {\r\n            Auction auction = null;\r\n            try {\r\n                auction = dataCenter.getAuctionWithId(auctionId);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            allAuctions.add(auction);\r\n        }\r\n        return allAuctions;\r\n    }\r\n\r\n    public Auction getAuctionWithId(String id) throws Exception {\r\n        return dataCenter.getAuctionWithId(Integer.parseInt(id));\r\n    }\r\n    //what the hell is this method?? //TODO\r\n    public void removeProductWithId(String id) throws Exception {\r\n        if (!dataCenter.doesProductExist(id))\r\n            throw new ProductExceptions(\"there is no product with this id\");\r\n        ProductInfo productInfo = getProductById(id);\r\n        if (productInfo.getBuyers().size() == 1) {\r\n            if (!dataCenter.deleteProduct(dataCenter.getProductById(Integer.parseInt(id))))\r\n                throw new ProductExceptions(\"can't delete product\");\r\n            dataCenter.deleteProductInfo(productInfo, this.loggedInAccount.getUsername());\r\n        } else\r\n            dataCenter.deleteProductInfo(productInfo, this.loggedInAccount.getUsername());\r\n\r\n    }\r\n\r\n    public String getSellerBalance() {\r\n        return Double.toString(((Seller) this.loggedInAccount).getCredit());\r\n    }\r\n\r\n    //seller end\r\n    //customer\r\n    public ArrayList<PurchaseLog> getCustomerOrdersHistory() {\r\n        return ((Customer) this.loggedInAccount).getBuyLogs();\r\n    }\r\n\r\n    public PurchaseLog getOrderById(String orderId) throws Exception {\r\n        for (PurchaseLog order : getCustomerOrdersHistory()) {\r\n            if (Integer.toString(order.getId()).equals(orderId))\r\n                return order;\r\n        }\r\n        throw new CustomerExceptions(\"there is no order with this id\");\r\n    }\r\n\r\n    public String getCustomerBalance() {\r\n        return Double.toString(((Customer) this.loggedInAccount).getCredit());\r\n    }\r\n\r\n    public ArrayList<DiscountCode> getCustomerDiscountCodes() {\r\n        return ((Customer) this.loggedInAccount).getAllDiscountCodes();\r\n    }\r\n\r\n    public void rate(String productId, String score) throws Exception {\r\n        if (!dataCenter.doesProductExist(productId))\r\n            throw new ProductExceptions(\"there is no product with this id\");\r\n        Product product = dataCenter.getProductById(Integer.parseInt(productId));\r\n        Score newScore = new Score(Double.parseDouble(score));\r\n        product.addScore(newScore);\r\n        dataCenter.saveProduct(product);\r\n    }\r\n\r\n    public CommandProcessor getParent() {\r\n        return Parent;\r\n    }\r\n\r\n    public void setParent(CommandProcessor parent) {\r\n        Parent = parent;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Controller/CommandProcessors/CommandProcessor.java	(revision 3d2339b18595e9c3092f77def07b81769ac35f5f)
+++ src/main/java/Controller/CommandProcessors/CommandProcessor.java	(date 1589624554176)
@@ -359,4 +359,8 @@
     public void setParent(CommandProcessor parent) {
         Parent = parent;
     }
+
+    public static Account getLoggedInAccount() {
+        return loggedInAccount;
+    }
 }
